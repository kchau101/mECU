
main.elf:     file format elf32-littlearm

SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
08000188 l    d  .text	00000000 .text
20000000 l    d  .data	00000000 .data
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 /tmp/ccGjv5RL.o
f1e0f85f l       *ABS*	00000000 BootRAM
080013ea l       .text	00000000 LoopCopyDataInit
080013e2 l       .text	00000000 CopyDataInit
08001402 l       .text	00000000 LoopFillZerobss
080013fc l       .text	00000000 FillZerobss
08001416 l       .text	00000000 LoopForever
08001430 l       .text	00000000 Infinite_Loop
00000000 l    df *ABS*	00000000 stm32f30x_gpio.c
00000000 l    df *ABS*	00000000 stm32f30x_rcc.c
20000000 l     O .data	00000010 APBAHBPrescTable
20000010 l     O .data	00000020 ADCPrescTable
00000000 l    df *ABS*	00000000 stm32f30x_usart.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 system_stm32f30x.c
080012fc l     F .text	000000e0 SetSysClock
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 /home/kevin/gcc-arm/bin/../lib/gcc/arm-none-eabi/4.8.4/armv7e-m/fpu/crti.o
00000000 l    df *ABS*	00000000 /home/kevin/gcc-arm/bin/../lib/gcc/arm-none-eabi/4.8.4/armv7e-m/fpu/crtn.o
00000000 l    df *ABS*	00000000 
20000030 l       .data	00000000 __exidx_end
00000000 l       *UND*	00000000 __fini_array_end
00000000 l       *UND*	00000000 malloc
00000000 l       *UND*	00000000 __bss_start__
20000030 l       .data	00000000 __exidx_start
00000000 l       *UND*	00000000 __deregister_frame_info
00000000 l       *UND*	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 __fini_array_start
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __libc_fini
00000000 l       *UND*	00000000 __stack
00000000 l       *UND*	00000000 _exit
00000000 l       *UND*	00000000 _Jv_RegisterClasses
00000000 l       *UND*	00000000 __register_frame_info
00000000 l       *UND*	00000000 free
08001430  w    F .text	00000004 RTC_Alarm_IRQHandler
08001430  w    F .text	00000004 TIM8_TRG_COM_IRQHandler
08000f48 g     F .text	00000012 USART_SetGuardTime
08001008 g     F .text	00000012 USART_SetDEDeassertionTime
08000458 g     F .text	0000000c RCC_HSICmd
08001430  w    F .text	00000004 TIM8_CC_IRQHandler
08000484 g     F .text	00000018 RCC_LSEDriveConfig
08000de8 g     F .text	00000014 USART_MSBFirstCmd
080004c0 g     F .text	0000000c RCC_PLLCmd
08001430  w    F .text	00000004 DebugMon_Handler
08000ae4 g     F .text	00000018 RCC_AHBPeriphResetCmd
080003b8 g     F .text	00000028 GPIO_PinAFConfig
08000be4 g     F .text	0000000c RCC_ClearITPendingBit
0800038c g     F .text	0000000c GPIO_ReadOutputDataBit
08000f84 g     F .text	00000012 USART_SetAutoRetryCount
08001430  w    F .text	00000004 TIM1_CC_IRQHandler
08001430  w    F .text	00000004 HardFault_Handler
08001430  w    F .text	00000004 USB_HP_IRQHandler
08001430  w    F .text	00000004 SysTick_Handler
080004ec g     F .text	00000014 RCC_MCOConfig
08001430  w    F .text	00000004 PVD_IRQHandler
080014a4 g       .text	00000000 _sidata
08001430  w    F .text	00000004 PendSV_Handler
08001430  w    F .text	00000004 NMI_Handler
08001430  w    F .text	00000004 EXTI3_IRQHandler
08000b2c g     F .text	00000018 RCC_ITConfig
08000dac g     F .text	00000012 USART_DirectionModeCmd
08000f5c g     F .text	00000014 USART_SmartCardCmd
080010a0 g     F .text	0000000c USART_GetFlagStatus
08000e4c g     F .text	00000010 USART_SetReceiverTimeOut
080014a4 g       .text	00000000 _etext
20000030 g       .data	00000000 _sbss
08000500 g     F .text	00000014 RCC_SYSCLKConfig
08000ef0 g     F .text	00000010 USART_MuteModeWakeUpConfig
08000b8c g     F .text	00000032 RCC_WaitForHSEStartUp
08000ec8 g     F .text	00000012 USART_SetAddress
08000ea8 g     F .text	00000010 USART_AutoBaudRateConfig
08000e5c g     F .text	00000012 USART_SetPrescaler
08000a90 g     F .text	0000000c RCC_BackupResetCmd
08000dd4 g     F .text	00000014 USART_OneBitMethodCmd
080004e0 g     F .text	0000000c RCC_ClockSecuritySystemCmd
08001430  w    F .text	00000004 EXTI0_IRQHandler
08001430  w    F .text	00000004 I2C2_EV_IRQHandler
08000bc0 g     F .text	00000010 RCC_ClearFlag
08001110 g     F .text	000000f4 init_state
08001430  w    F .text	00000004 FPU_IRQHandler
08001430  w    F .text	00000004 EXTI2_TS_IRQHandler
08000ec0 g     F .text	00000008 USART_ReceiveData
08001430  w    F .text	00000004 TIM1_UP_TIM16_IRQHandler
08000434 g     F .text	00000010 RCC_HSEConfig
08001430  w    F .text	00000004 UsageFault_Handler
08000ab4 g     F .text	00000018 RCC_APB2PeriphClockCmd
08001430  w    F .text	00000004 ADC1_2_IRQHandler
08000298 g     F .text	000000ba GPIO_Init
080004a8 g     F .text	00000018 RCC_PLLConfig
08000910 g     F .text	00000020 RCC_ADCCLKConfig
20000000 g       .data	00000000 _sdata
08001430  w    F .text	00000004 SPI1_IRQHandler
08000d98 g     F .text	00000014 USART_Cmd
08000fbc g     F .text	00000014 USART_IrDACmd
080009e8 g     F .text	00000018 RCC_HRTIM1CLKConfig
080003b4 g     F .text	00000004 GPIO_Write
08001430  w    F .text	00000004 TIM6_DAC_IRQHandler
08000398 g     F .text	00000006 GPIO_ReadOutputData
08000464 g     F .text	00000020 RCC_LSEConfig
080010f4 g     F .text	0000000c USART_ClearITPendingBit
08000a84 g     F .text	0000000c RCC_RTCCLKCmd
08001430  w    F .text	00000004 TIM8_UP_IRQHandler
08000acc g     F .text	00000018 RCC_APB1PeriphClockCmd
08000bd0 g     F .text	00000014 RCC_GetITStatus
08001434 g     F .text	00000050 __libc_init_array
08001430  w    F .text	00000004 DMA2_Channel2_IRQHandler
08000a9c g     F .text	00000018 RCC_AHBPeriphClockCmd
08001430  w    F .text	00000004 DMA1_Channel4_IRQHandler
08000edc g     F .text	00000014 USART_MuteModeCmd
08000dc0 g     F .text	00000014 USART_OverSampling8Cmd
0800148c g     F .text	00000000 _init
08001204 g     F .text	0000002c ready_state
08001430  w    F .text	00000004 USART3_IRQHandler
20000030 g       .data	00000000 _ebss
080010b0 g     F .text	00000044 USART_GetITStatus
08001430  w    F .text	00000004 DMA1_Channel7_IRQHandler
080013dc  w    F .text	0000003e Reset_Handler
08000384 g     F .text	00000006 GPIO_ReadInputData
08000f10 g     F .text	00000010 USART_LINBreakDetectLengthConfig
08001430  w    F .text	00000004 CAN1_RX1_IRQHandler
08001430  w    F .text	00000004 UART5_IRQHandler
08000b44 g     F .text	00000048 RCC_GetFlagStatus
08001430  w    F .text	00000004 ADC3_IRQHandler
08000f00 g     F .text	00000010 USART_AddressDetectionConfig
080003a0 g     F .text	00000004 GPIO_SetBits
08001430  w    F .text	00000004 TIM4_IRQHandler
08000514 g     F .text	00000010 RCC_GetSYSCLKSource
080003a8 g     F .text	0000000a GPIO_WriteBit
08001430  w    F .text	00000004 DMA2_Channel1_IRQHandler
08001430  w    F .text	00000004 I2C1_EV_IRQHandler
08000560 g     F .text	000003b0 RCC_GetClocksFreq
08001430  w    F .text	00000004 DMA1_Channel6_IRQHandler
08001430  w    F .text	00000004 UART4_IRQHandler
08001430  w    F .text	00000004 DMA2_Channel4_IRQHandler
08000ca0 g     F .text	000000b4 USART_Init
08001430  w    F .text	00000004 TIM3_IRQHandler
08001430  w    F .text	00000004 RCC_IRQHandler
20000030 g       .data	00000000 _bss
08001430  w    F .text	00000004 DMA1_Channel1_IRQHandler
08000fd0 g     F .text	00000014 USART_DECmd
08001430 g       .text	00000004 Default_Handler
08001430  w    F .text	00000004 USBWakeUp_RMP_IRQHandler
08000f34 g     F .text	00000014 USART_HalfDuplexCmd
08000a68 g     F .text	00000010 RCC_RTCCLKConfig
08001430  w    F .text	00000004 EXTI15_10_IRQHandler
08001040 g     F .text	00000038 USART_ITConfig
08000dfc g     F .text	00000014 USART_DataInvCmd
08000e24 g     F .text	00000014 USART_SWAPPinCmd
080003a4 g     F .text	00000004 GPIO_ResetBits
08001430  w    F .text	00000004 TIM7_IRQHandler
08000fac g     F .text	00000010 USART_IrDAConfig
08000e70 g     F .text	00000014 USART_STOPModeCmd
08000fe4 g     F .text	00000010 USART_DEPolarityConfig
08001430  w    F .text	00000004 EXTI9_5_IRQHandler
08001430  w    F .text	00000004 TAMPER_STAMP_IRQHandler
08001430  w    F .text	00000004 RTC_WKUP_IRQHandler
08001090 g     F .text	00000010 USART_OverrunDetectionConfig
08000bf0 g     F .text	000000b0 USART_DeInit
08001430  w    F .text	00000004 SPI2_IRQHandler
08001430  w    F .text	00000004 MemManage_Handler
08000444 g     F .text	00000014 RCC_AdjustHSICalibrationValue
08001230 g     F .text	0000003c main
08000d6c g     F .text	0000001e USART_ClockInit
08001430  w    F .text	00000004 SVC_Handler
08001430  w    F .text	00000004 DMA2_Channel5_IRQHandler
00000000  w      *UND*	00000000 __init_array_end
08000538 g     F .text	00000014 RCC_PCLK1Config
08001430  w    F .text	00000004 DMA1_Channel5_IRQHandler
08000a5c g     F .text	0000000c RCC_USBCLKConfig
08001430  w    F .text	00000004 USB_LP_IRQHandler
08001430  w    F .text	00000004 EXTI4_IRQHandler
08001430  w    F .text	00000004 USB_LP_CAN1_RX0_IRQHandler
0800054c g     F .text	00000014 RCC_PCLK2Config
080010ac g     F .text	00000004 USART_ClearFlag
0800126c g     F .text	00000090 SystemInit
08000188 g     F .text	00000110 GPIO_DeInit
08001498 g     F .text	00000000 _fini
08001430  w    F .text	00000004 TIM1_TRG_COM_TIM17_IRQHandler
08001430  w    F .text	00000004 USB_HP_CAN1_TX_IRQHandler
080003e0 g     F .text	00000054 RCC_DeInit
08001430  w    F .text	00000004 DMA1_Channel3_IRQHandler
08000e84 g     F .text	00000010 USART_StopModeWakeUpSourceConfig
08001430  w    F .text	00000004 ADC4_IRQHandler
00000000  w      *UND*	00000000 __preinit_array_end
08001430  w    F .text	00000004 WWDG_IRQHandler
08000b14 g     F .text	00000018 RCC_APB1PeriphResetCmd
20000000 g       .data	00000000 _data
080004cc g     F .text	00000014 RCC_PREDIV1Config
08001430  w    F .text	00000004 TIM2_IRQHandler
08000354 g     F .text	00000014 GPIO_StructInit
08001078 g     F .text	00000016 USART_RequestCmd
08001430  w    F .text	00000004 COMP7_IRQHandler
20008000 g       *ABS*	00000000 _estack
08000eb8 g     F .text	00000008 USART_SendData
08001430  w    F .text	00000004 COMP1_2_3_IRQHandler
08001430  w    F .text	00000004 EXTI1_IRQHandler
20000030 g       .data	00000000 _edata
08000d54 g     F .text	00000016 USART_StructInit
08000e38 g     F .text	00000014 USART_ReceiverTimeOutCmd
08001430  w    F .text	00000004 USART2_IRQHandler
08001430  w    F .text	00000004 COMP4_5_6_IRQHandler
08000f70 g     F .text	00000014 USART_SmartCardNACKCmd
08000f98 g     F .text	00000012 USART_SetBlockLength
08000000 g     O .isr_vector	00000000 g_pfnVectors
08000f20 g     F .text	00000014 USART_LINCmd
08000a00 g     F .text	0000005c RCC_USARTCLKConfig
08001430  w    F .text	00000004 I2C2_ER_IRQHandler
08001430  w    F .text	00000004 DMA1_Channel2_IRQHandler
0800096c g     F .text	0000007c RCC_TIMCLKConfig
08000e10 g     F .text	00000012 USART_InvPinCmd
08001430  w    F .text	00000004 TIM8_BRK_IRQHandler
00000000  w      *UND*	00000000 __init_array_start
08000930 g     F .text	0000003c RCC_I2CCLKConfig
08001430  w    F .text	00000004 CAN1_SCE_IRQHandler
08000a78 g     F .text	0000000c RCC_I2SCLKConfig
08001430  w    F .text	00000004 FLASH_IRQHandler
08000368 g     F .text	00000010 GPIO_PinLockConfig
08001430  w    F .text	00000004 BusFault_Handler
08001430  w    F .text	00000004 USART1_IRQHandler
0800049c g     F .text	0000000c RCC_LSICmd
08001430  w    F .text	00000004 SPI3_IRQHandler
08000d8c g     F .text	0000000c USART_ClockStructInit
08000afc g     F .text	00000018 RCC_APB2PeriphResetCmd
08000e94 g     F .text	00000014 USART_AutoBaudRateCmd
08001430  w    F .text	00000004 I2C1_ER_IRQHandler
00000000  w      *UND*	00000000 __preinit_array_start
08001100 g     F .text	00000010 illegal_state
08000378 g     F .text	0000000c GPIO_ReadInputDataBit
0800101c g     F .text	00000012 USART_DMACmd
08000ff4 g     F .text	00000012 USART_SetDEAssertionTime
08001430  w    F .text	00000004 USBWakeUp_IRQHandler
08000524 g     F .text	00000014 RCC_HCLKConfig
08001430  w    F .text	00000004 DMA2_Channel3_IRQHandler
08001030 g     F .text	00000010 USART_DMAReceptionErrorConfig
08001430  w    F .text	00000004 TIM1_BRK_TIM15_IRQHandler



Disassembly of section .text:

08000188 <GPIO_DeInit>:
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if(GPIOx == GPIOA)
 8000188:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
  *         values.
  * @param  GPIOx: where x can be (A, B, C, D, E or F) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 800018c:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if(GPIOx == GPIOA)
 800018e:	d021      	beq.n	80001d4 <GPIO_DeInit+0x4c>
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, DISABLE);
  }
  else if(GPIOx == GPIOB)
 8000190:	4b3a      	ldr	r3, [pc, #232]	; (800027c <GPIO_DeInit+0xf4>)
 8000192:	4298      	cmp	r0, r3
 8000194:	d02a      	beq.n	80001ec <GPIO_DeInit+0x64>
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, DISABLE);
  }
  else if(GPIOx == GPIOC)
 8000196:	4b3a      	ldr	r3, [pc, #232]	; (8000280 <GPIO_DeInit+0xf8>)
 8000198:	4298      	cmp	r0, r3
 800019a:	d033      	beq.n	8000204 <GPIO_DeInit+0x7c>
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, DISABLE);
  }
  else if(GPIOx == GPIOD)
 800019c:	4b39      	ldr	r3, [pc, #228]	; (8000284 <GPIO_DeInit+0xfc>)
 800019e:	4298      	cmp	r0, r3
 80001a0:	d03c      	beq.n	800021c <GPIO_DeInit+0x94>
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, DISABLE);
  }
  else if(GPIOx == GPIOE)
 80001a2:	4b39      	ldr	r3, [pc, #228]	; (8000288 <GPIO_DeInit+0x100>)
 80001a4:	4298      	cmp	r0, r3
 80001a6:	d045      	beq.n	8000234 <GPIO_DeInit+0xac>
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOE, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOE, DISABLE);
  }
  else if(GPIOx == GPIOF)
 80001a8:	4b38      	ldr	r3, [pc, #224]	; (800028c <GPIO_DeInit+0x104>)
 80001aa:	4298      	cmp	r0, r3
 80001ac:	d04e      	beq.n	800024c <GPIO_DeInit+0xc4>
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, DISABLE);
  }
  else if(GPIOx == GPIOG)
 80001ae:	4b38      	ldr	r3, [pc, #224]	; (8000290 <GPIO_DeInit+0x108>)
 80001b0:	4298      	cmp	r0, r3
 80001b2:	d057      	beq.n	8000264 <GPIO_DeInit+0xdc>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOG, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOG, DISABLE);
  }
  else
  {
    if(GPIOx == GPIOH)
 80001b4:	4b37      	ldr	r3, [pc, #220]	; (8000294 <GPIO_DeInit+0x10c>)
 80001b6:	4298      	cmp	r0, r3
 80001b8:	d000      	beq.n	80001bc <GPIO_DeInit+0x34>
 80001ba:	bd08      	pop	{r3, pc}
    {
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOH, ENABLE);
 80001bc:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80001c0:	2101      	movs	r1, #1
 80001c2:	f000 fc8f 	bl	8000ae4 <RCC_AHBPeriphResetCmd>
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOH, DISABLE);
 80001c6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80001ca:	2100      	movs	r1, #0
    }
  }
}
 80001cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if(GPIOx == GPIOH)
    {
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOH, ENABLE);
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOH, DISABLE);
 80001d0:	f000 bc88 	b.w	8000ae4 <RCC_AHBPeriphResetCmd>
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if(GPIOx == GPIOA)
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 80001d4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80001d8:	2101      	movs	r1, #1
 80001da:	f000 fc83 	bl	8000ae4 <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, DISABLE);
 80001de:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80001e2:	2100      	movs	r1, #0
    {
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOH, ENABLE);
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOH, DISABLE);
    }
  }
}
 80001e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if(GPIOx == GPIOA)
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, DISABLE);
 80001e8:	f000 bc7c 	b.w	8000ae4 <RCC_AHBPeriphResetCmd>
  }
  else if(GPIOx == GPIOB)
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 80001ec:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80001f0:	2101      	movs	r1, #1
 80001f2:	f000 fc77 	bl	8000ae4 <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, DISABLE);
 80001f6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80001fa:	2100      	movs	r1, #0
    {
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOH, ENABLE);
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOH, DISABLE);
    }
  }
}
 80001fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, DISABLE);
  }
  else if(GPIOx == GPIOB)
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, DISABLE);
 8000200:	f000 bc70 	b.w	8000ae4 <RCC_AHBPeriphResetCmd>
  }
  else if(GPIOx == GPIOC)
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, ENABLE);
 8000204:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000208:	2101      	movs	r1, #1
 800020a:	f000 fc6b 	bl	8000ae4 <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, DISABLE);
 800020e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000212:	2100      	movs	r1, #0
    {
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOH, ENABLE);
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOH, DISABLE);
    }
  }
}
 8000214:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, DISABLE);
  }
  else if(GPIOx == GPIOC)
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, DISABLE);
 8000218:	f000 bc64 	b.w	8000ae4 <RCC_AHBPeriphResetCmd>
  }
  else if(GPIOx == GPIOD)
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, ENABLE);
 800021c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000220:	2101      	movs	r1, #1
 8000222:	f000 fc5f 	bl	8000ae4 <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, DISABLE);
 8000226:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800022a:	2100      	movs	r1, #0
    {
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOH, ENABLE);
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOH, DISABLE);
    }
  }
}
 800022c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, DISABLE);
  }
  else if(GPIOx == GPIOD)
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, DISABLE);
 8000230:	f000 bc58 	b.w	8000ae4 <RCC_AHBPeriphResetCmd>
  }
  else if(GPIOx == GPIOE)
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOE, ENABLE);
 8000234:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000238:	2101      	movs	r1, #1
 800023a:	f000 fc53 	bl	8000ae4 <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOE, DISABLE);
 800023e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000242:	2100      	movs	r1, #0
    {
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOH, ENABLE);
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOH, DISABLE);
    }
  }
}
 8000244:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, DISABLE);
  }
  else if(GPIOx == GPIOE)
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOE, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOE, DISABLE);
 8000248:	f000 bc4c 	b.w	8000ae4 <RCC_AHBPeriphResetCmd>
  }
  else if(GPIOx == GPIOF)
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, ENABLE);
 800024c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000250:	2101      	movs	r1, #1
 8000252:	f000 fc47 	bl	8000ae4 <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, DISABLE);
 8000256:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800025a:	2100      	movs	r1, #0
    {
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOH, ENABLE);
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOH, DISABLE);
    }
  }
}
 800025c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOE, DISABLE);
  }
  else if(GPIOx == GPIOF)
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, DISABLE);
 8000260:	f000 bc40 	b.w	8000ae4 <RCC_AHBPeriphResetCmd>
  }
  else if(GPIOx == GPIOG)
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOG, ENABLE);
 8000264:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000268:	2101      	movs	r1, #1
 800026a:	f000 fc3b 	bl	8000ae4 <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOG, DISABLE);
 800026e:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000272:	2100      	movs	r1, #0
    {
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOH, ENABLE);
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOH, DISABLE);
    }
  }
}
 8000274:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, DISABLE);
  }
  else if(GPIOx == GPIOG)
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOG, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOG, DISABLE);
 8000278:	f000 bc34 	b.w	8000ae4 <RCC_AHBPeriphResetCmd>
 800027c:	48000400 	.word	0x48000400
 8000280:	48000800 	.word	0x48000800
 8000284:	48000c00 	.word	0x48000c00
 8000288:	48001000 	.word	0x48001000
 800028c:	48001400 	.word	0x48001400
 8000290:	48001800 	.word	0x48001800
 8000294:	48001c00 	.word	0x48001c00

08000298 <GPIO_Init>:
  *         GPIO_Pin_0->GPIO_Pin_2, GPIO_Pin_4, GPIO_Pin_6, GPIO_Pin_9 
  *                       and GPIO_Pin_10 for GPIOF.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{ 
 8000298:	2200      	movs	r2, #0
 800029a:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800029e:	4613      	mov	r3, r2
 80002a0:	680e      	ldr	r6, [r1, #0]
  {
    pos = ((uint32_t)0x01) << pinpos;
 80002a2:	2701      	movs	r7, #1
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));

      /* Use temporary variable to update PUPDR register configuration, to avoid 
         unexpected transition in the GPIO pin configuration. */
      tmpreg = GPIOx->PUPDR;
      tmpreg &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80002a4:	f04f 0803 	mov.w	r8, #3
 80002a8:	e004      	b.n	80002b4 <GPIO_Init+0x1c>
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80002aa:	3301      	adds	r3, #1
 80002ac:	2b10      	cmp	r3, #16
 80002ae:	f102 0202 	add.w	r2, r2, #2
 80002b2:	d027      	beq.n	8000304 <GPIO_Init+0x6c>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80002b4:	fa07 f403 	lsl.w	r4, r7, r3

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80002b8:	ea04 0506 	and.w	r5, r4, r6

    if (currentpin == pos)
 80002bc:	42a5      	cmp	r5, r4
 80002be:	d1f4      	bne.n	80002aa <GPIO_Init+0x12>
    {
      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80002c0:	790c      	ldrb	r4, [r1, #4]
 80002c2:	f104 3cff 	add.w	ip, r4, #4294967295
 80002c6:	f1bc 0f01 	cmp.w	ip, #1
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80002ca:	fa08 fc02 	lsl.w	ip, r8, r2
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80002ce:	d91c      	bls.n	800030a <GPIO_Init+0x72>
 80002d0:	ea6f 0c0c 	mvn.w	ip, ip
        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }
      
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80002d4:	6805      	ldr	r5, [r0, #0]

      /* Use temporary variable to update PUPDR register configuration, to avoid 
         unexpected transition in the GPIO pin configuration. */
      tmpreg = GPIOx->PUPDR;
      tmpreg &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      tmpreg |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80002d6:	f891 9007 	ldrb.w	r9, [r1, #7]
        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }
      
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80002da:	ea0c 0505 	and.w	r5, ip, r5
 80002de:	6005      	str	r5, [r0, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80002e0:	6805      	ldr	r5, [r0, #0]
 80002e2:	4094      	lsls	r4, r2
 80002e4:	432c      	orrs	r4, r5
 80002e6:	6004      	str	r4, [r0, #0]

      /* Use temporary variable to update PUPDR register configuration, to avoid 
         unexpected transition in the GPIO pin configuration. */
      tmpreg = GPIOx->PUPDR;
 80002e8:	68c4      	ldr	r4, [r0, #12]
      tmpreg &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80002ea:	fa08 f502 	lsl.w	r5, r8, r2
 80002ee:	ea24 0505 	bic.w	r5, r4, r5
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80002f2:	3301      	adds	r3, #1

      /* Use temporary variable to update PUPDR register configuration, to avoid 
         unexpected transition in the GPIO pin configuration. */
      tmpreg = GPIOx->PUPDR;
      tmpreg &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      tmpreg |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80002f4:	fa09 f402 	lsl.w	r4, r9, r2
 80002f8:	432c      	orrs	r4, r5
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80002fa:	2b10      	cmp	r3, #16
      /* Use temporary variable to update PUPDR register configuration, to avoid 
         unexpected transition in the GPIO pin configuration. */
      tmpreg = GPIOx->PUPDR;
      tmpreg &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      tmpreg |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
      GPIOx->PUPDR = tmpreg;
 80002fc:	60c4      	str	r4, [r0, #12]
 80002fe:	f102 0202 	add.w	r2, r2, #2
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000302:	d1d7      	bne.n	80002b4 <GPIO_Init+0x1c>
      tmpreg &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      tmpreg |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
      GPIOx->PUPDR = tmpreg;
    }
  }
}
 8000304:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000308:	4770      	bx	lr
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800030a:	f8d0 b008 	ldr.w	fp, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800030e:	f891 9005 	ldrb.w	r9, [r1, #5]
        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000312:	f891 a006 	ldrb.w	sl, [r1, #6]
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000316:	ea6f 0c0c 	mvn.w	ip, ip
 800031a:	ea0c 0b0b 	and.w	fp, ip, fp
 800031e:	f8c0 b008 	str.w	fp, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000322:	f8d0 b008 	ldr.w	fp, [r0, #8]
 8000326:	fa09 f902 	lsl.w	r9, r9, r2
 800032a:	ea49 090b 	orr.w	r9, r9, fp
 800032e:	f8c0 9008 	str.w	r9, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
 8000332:	f8b0 9004 	ldrh.w	r9, [r0, #4]
 8000336:	fa1f f989 	uxth.w	r9, r9
 800033a:	ea29 0505 	bic.w	r5, r9, r5
 800033e:	8085      	strh	r5, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000340:	f8b0 9004 	ldrh.w	r9, [r0, #4]
 8000344:	fa0a f503 	lsl.w	r5, sl, r3
 8000348:	ea45 0509 	orr.w	r5, r5, r9
 800034c:	b2ad      	uxth	r5, r5
 800034e:	8085      	strh	r5, [r0, #4]
 8000350:	e7c0      	b.n	80002d4 <GPIO_Init+0x3c>
 8000352:	bf00      	nop

08000354 <GPIO_StructInit>:
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8000354:	2300      	movs	r3, #0
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8000356:	f64f 71ff 	movw	r1, #65535	; 0xffff
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 800035a:	2202      	movs	r2, #2
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 800035c:	6001      	str	r1, [r0, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 800035e:	7142      	strb	r2, [r0, #5]
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8000360:	7103      	strb	r3, [r0, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 8000362:	7183      	strb	r3, [r0, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000364:	71c3      	strb	r3, [r0, #7]
 8000366:	4770      	bx	lr

08000368 <GPIO_PinLockConfig>:
  
  /* Check the parameters */
  assert_param(IS_GPIO_LIST_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  tmp |= GPIO_Pin;
 8000368:	f441 3380 	orr.w	r3, r1, #65536	; 0x10000
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 800036c:	61c3      	str	r3, [r0, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 800036e:	61c1      	str	r1, [r0, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8000370:	61c3      	str	r3, [r0, #28]
  /* Read LCKK bit */
  tmp = GPIOx->LCKR;
 8000372:	69c3      	ldr	r3, [r0, #28]
  /* Read LCKK bit */
  tmp = GPIOx->LCKR;
 8000374:	69c3      	ldr	r3, [r0, #28]
 8000376:	4770      	bx	lr

08000378 <GPIO_ReadInputDataBit>:
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000378:	8a03      	ldrh	r3, [r0, #16]
 800037a:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 800037c:	bf0c      	ite	eq
 800037e:	2000      	moveq	r0, #0
 8000380:	2001      	movne	r0, #1
 8000382:	4770      	bx	lr

08000384 <GPIO_ReadInputData>:
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 8000384:	8a00      	ldrh	r0, [r0, #16]
}
 8000386:	b280      	uxth	r0, r0
 8000388:	4770      	bx	lr
 800038a:	bf00      	nop

0800038c <GPIO_ReadOutputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  
  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 800038c:	8a83      	ldrh	r3, [r0, #20]
 800038e:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 8000390:	bf0c      	ite	eq
 8000392:	2000      	moveq	r0, #0
 8000394:	2001      	movne	r0, #1
 8000396:	4770      	bx	lr

08000398 <GPIO_ReadOutputData>:
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  return ((uint16_t)GPIOx->ODR);
 8000398:	8a80      	ldrh	r0, [r0, #20]
}
 800039a:	b280      	uxth	r0, r0
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 80003a0:	6181      	str	r1, [r0, #24]
 80003a2:	4770      	bx	lr

080003a4 <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 80003a4:	8501      	strh	r1, [r0, #40]	; 0x28
 80003a6:	4770      	bx	lr

080003a8 <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));
  
  if (BitVal != Bit_RESET)
 80003a8:	b90a      	cbnz	r2, 80003ae <GPIO_WriteBit+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
 80003aa:	8501      	strh	r1, [r0, #40]	; 0x28
 80003ac:	4770      	bx	lr
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));
  
  if (BitVal != Bit_RESET)
  {
    GPIOx->BSRR = GPIO_Pin;
 80003ae:	6181      	str	r1, [r0, #24]
 80003b0:	4770      	bx	lr
 80003b2:	bf00      	nop

080003b4 <GPIO_Write>:
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  GPIOx->ODR = PortVal;
 80003b4:	8281      	strh	r1, [r0, #20]
 80003b6:	4770      	bx	lr

080003b8 <GPIO_PinAFConfig>:
  *        for the detailed mapping of the system and peripherals alternate 
  *        function I/O pins.
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80003b8:	08cb      	lsrs	r3, r1, #3
 80003ba:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 80003be:	f001 0107 	and.w	r1, r1, #7
  *        for the detailed mapping of the system and peripherals alternate 
  *        function I/O pins.
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80003c2:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 80003c4:	0089      	lsls	r1, r1, #2
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 80003c6:	6a04      	ldr	r4, [r0, #32]
 80003c8:	230f      	movs	r3, #15
 80003ca:	408b      	lsls	r3, r1
 80003cc:	ea24 0303 	bic.w	r3, r4, r3
 80003d0:	6203      	str	r3, [r0, #32]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80003d2:	6a03      	ldr	r3, [r0, #32]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
}
 80003d4:	f85d 4b04 	ldr.w	r4, [sp], #4
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 80003d8:	408a      	lsls	r2, r1
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80003da:	4313      	orrs	r3, r2
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80003dc:	6203      	str	r3, [r0, #32]
}
 80003de:	4770      	bx	lr

080003e0 <RCC_DeInit>:
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80003e0:	4b11      	ldr	r3, [pc, #68]	; (8000428 <RCC_DeInit+0x48>)

  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0] and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFC000;
 80003e2:	4912      	ldr	r1, [pc, #72]	; (800042c <RCC_DeInit+0x4c>)
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80003e4:	6818      	ldr	r0, [r3, #0]

  /* Reset PREDIV1[3:0] and ADCPRE[13:4] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFC000;

  /* Reset USARTSW[1:0], I2CSW and TIMSW bits */
  RCC->CFGR3 &= (uint32_t)0xF00ECCC;
 80003e6:	4a12      	ldr	r2, [pc, #72]	; (8000430 <RCC_DeInit+0x50>)
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80003e8:	f040 0001 	orr.w	r0, r0, #1
 80003ec:	6018      	str	r0, [r3, #0]

  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0] and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFC000;
 80003ee:	6858      	ldr	r0, [r3, #4]
 80003f0:	4001      	ands	r1, r0
 80003f2:	6059      	str	r1, [r3, #4]
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80003f4:	6819      	ldr	r1, [r3, #0]
 80003f6:	f021 7184 	bic.w	r1, r1, #17301504	; 0x1080000
 80003fa:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80003fe:	6019      	str	r1, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000400:	6819      	ldr	r1, [r3, #0]
 8000402:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8000406:	6019      	str	r1, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000408:	6859      	ldr	r1, [r3, #4]
 800040a:	f421 01fe 	bic.w	r1, r1, #8323072	; 0x7f0000
 800040e:	6059      	str	r1, [r3, #4]

  /* Reset PREDIV1[3:0] and ADCPRE[13:4] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFC000;
 8000410:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000412:	f421 517f 	bic.w	r1, r1, #16320	; 0x3fc0
 8000416:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 800041a:	62d9      	str	r1, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMSW bits */
  RCC->CFGR3 &= (uint32_t)0xF00ECCC;
 800041c:	6b18      	ldr	r0, [r3, #48]	; 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800041e:	2100      	movs	r1, #0

  /* Reset PREDIV1[3:0] and ADCPRE[13:4] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFC000;

  /* Reset USARTSW[1:0], I2CSW and TIMSW bits */
  RCC->CFGR3 &= (uint32_t)0xF00ECCC;
 8000420:	4002      	ands	r2, r0
 8000422:	631a      	str	r2, [r3, #48]	; 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000424:	6099      	str	r1, [r3, #8]
 8000426:	4770      	bx	lr
 8000428:	40021000 	.word	0x40021000
 800042c:	f8ffc000 	.word	0xf8ffc000
 8000430:	0f00eccc 	.word	0x0f00eccc

08000434 <RCC_HSEConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE2_ADDRESS = RCC_HSE_OFF;
 8000434:	4b02      	ldr	r3, [pc, #8]	; (8000440 <RCC_HSEConfig+0xc>)
 8000436:	2200      	movs	r2, #0
 8000438:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE2_ADDRESS = RCC_HSE;
 800043a:	7018      	strb	r0, [r3, #0]
 800043c:	4770      	bx	lr
 800043e:	bf00      	nop
 8000440:	40021002 	.word	0x40021002

08000444 <RCC_AdjustHSICalibrationValue>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_HSI_CALIBRATION_VALUE(HSICalibrationValue));
  
  tmpreg = RCC->CR;
 8000444:	4b03      	ldr	r3, [pc, #12]	; (8000454 <RCC_AdjustHSICalibrationValue+0x10>)
 8000446:	681a      	ldr	r2, [r3, #0]
  
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 8000448:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
  
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 800044c:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
  
  /* Store the new value */
  RCC->CR = tmpreg;
 8000450:	6018      	str	r0, [r3, #0]
 8000452:	4770      	bx	lr
 8000454:	40021000 	.word	0x40021000

08000458 <RCC_HSICmd>:
void RCC_HSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 8000458:	4b01      	ldr	r3, [pc, #4]	; (8000460 <RCC_HSICmd+0x8>)
 800045a:	6018      	str	r0, [r3, #0]
 800045c:	4770      	bx	lr
 800045e:	bf00      	nop
 8000460:	42420000 	.word	0x42420000

08000464 <RCC_LSEConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  RCC->BDCR &= ~(RCC_BDCR_LSEON);
 8000464:	4b06      	ldr	r3, [pc, #24]	; (8000480 <RCC_LSEConfig+0x1c>)
 8000466:	6a1a      	ldr	r2, [r3, #32]
 8000468:	f022 0201 	bic.w	r2, r2, #1
 800046c:	621a      	str	r2, [r3, #32]

  /* Reset LSEBYP bit */
  RCC->BDCR &= ~(RCC_BDCR_LSEBYP);
 800046e:	6a1a      	ldr	r2, [r3, #32]
 8000470:	f022 0204 	bic.w	r2, r2, #4
 8000474:	621a      	str	r2, [r3, #32]

  /* Configure LSE */
  RCC->BDCR |= RCC_LSE;
 8000476:	6a1a      	ldr	r2, [r3, #32]
 8000478:	4310      	orrs	r0, r2
 800047a:	6218      	str	r0, [r3, #32]
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop
 8000480:	40021000 	.word	0x40021000

08000484 <RCC_LSEDriveConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_LSE_DRIVE(RCC_LSEDrive));
  
  /* Clear LSEDRV[1:0] bits */
  RCC->BDCR &= ~(RCC_BDCR_LSEDRV);
 8000484:	4b04      	ldr	r3, [pc, #16]	; (8000498 <RCC_LSEDriveConfig+0x14>)
 8000486:	6a1a      	ldr	r2, [r3, #32]
 8000488:	f022 0218 	bic.w	r2, r2, #24
 800048c:	621a      	str	r2, [r3, #32]

  /* Set the LSE Drive */
  RCC->BDCR |= RCC_LSEDrive;
 800048e:	6a1a      	ldr	r2, [r3, #32]
 8000490:	4310      	orrs	r0, r2
 8000492:	6218      	str	r0, [r3, #32]
 8000494:	4770      	bx	lr
 8000496:	bf00      	nop
 8000498:	40021000 	.word	0x40021000

0800049c <RCC_LSICmd>:
void RCC_LSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 800049c:	4b01      	ldr	r3, [pc, #4]	; (80004a4 <RCC_LSICmd+0x8>)
 800049e:	6018      	str	r0, [r3, #0]
 80004a0:	4770      	bx	lr
 80004a2:	bf00      	nop
 80004a4:	42420480 	.word	0x42420480

080004a8 <RCC_PLLConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));
  
  /* Clear PLL Source [16] and Multiplier [21:18] bits */
  RCC->CFGR &= ~(RCC_CFGR_PLLMULL | RCC_CFGR_PLLSRC);
 80004a8:	4b04      	ldr	r3, [pc, #16]	; (80004bc <RCC_PLLConfig+0x14>)
 80004aa:	685a      	ldr	r2, [r3, #4]
 80004ac:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80004b0:	605a      	str	r2, [r3, #4]

  /* Set the PLL Source and Multiplier */
  RCC->CFGR |= (uint32_t)(RCC_PLLSource | RCC_PLLMul);
 80004b2:	685a      	ldr	r2, [r3, #4]
 80004b4:	4311      	orrs	r1, r2
 80004b6:	4308      	orrs	r0, r1
 80004b8:	6058      	str	r0, [r3, #4]
 80004ba:	4770      	bx	lr
 80004bc:	40021000 	.word	0x40021000

080004c0 <RCC_PLLCmd>:
void RCC_PLLCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 80004c0:	4b01      	ldr	r3, [pc, #4]	; (80004c8 <RCC_PLLCmd+0x8>)
 80004c2:	6018      	str	r0, [r3, #0]
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop
 80004c8:	42420060 	.word	0x42420060

080004cc <RCC_PREDIV1Config>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_PREDIV1(RCC_PREDIV1_Div));

  tmpreg = RCC->CFGR2;
 80004cc:	4b03      	ldr	r3, [pc, #12]	; (80004dc <RCC_PREDIV1Config+0x10>)
 80004ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  /* Clear PREDIV1[3:0] bits */
  tmpreg &= ~(RCC_CFGR2_PREDIV1);
 80004d0:	f022 020f 	bic.w	r2, r2, #15

  /* Set the PREDIV1 division factor */
  tmpreg |= RCC_PREDIV1_Div;
 80004d4:	4310      	orrs	r0, r2

  /* Store the new value */
  RCC->CFGR2 = tmpreg;
 80004d6:	62d8      	str	r0, [r3, #44]	; 0x2c
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop
 80004dc:	40021000 	.word	0x40021000

080004e0 <RCC_ClockSecuritySystemCmd>:
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 80004e0:	4b01      	ldr	r3, [pc, #4]	; (80004e8 <RCC_ClockSecuritySystemCmd+0x8>)
 80004e2:	6018      	str	r0, [r3, #0]
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop
 80004e8:	4242004c 	.word	0x4242004c

080004ec <RCC_MCOConfig>:
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO_SOURCE(RCC_MCOSource));

  /* Get CFGR value */  
  tmpreg = RCC->CFGR;
 80004ec:	4b03      	ldr	r3, [pc, #12]	; (80004fc <RCC_MCOConfig+0x10>)
 80004ee:	685a      	ldr	r2, [r3, #4]
  /* Clear MCO[3:0] bits */
  tmpreg &= ~(RCC_CFGR_MCO | RCC_CFGR_PLLNODIV);
 80004f0:	f022 4207 	bic.w	r2, r2, #2264924160	; 0x87000000
  /* Set the RCC_MCOSource */
  tmpreg |= RCC_MCOSource<<24;
 80004f4:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
  /* Store the new value */
  RCC->CFGR = tmpreg;
 80004f8:	6058      	str	r0, [r3, #4]
 80004fa:	4770      	bx	lr
 80004fc:	40021000 	.word	0x40021000

08000500 <RCC_SYSCLKConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  
  tmpreg = RCC->CFGR;
 8000500:	4b03      	ldr	r3, [pc, #12]	; (8000510 <RCC_SYSCLKConfig+0x10>)
 8000502:	685a      	ldr	r2, [r3, #4]
  
  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 8000504:	f022 0203 	bic.w	r2, r2, #3
  
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8000508:	4310      	orrs	r0, r2
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
 800050a:	6058      	str	r0, [r3, #4]
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	40021000 	.word	0x40021000

08000514 <RCC_GetSYSCLKSource>:
  *              - 0x04: HSE used as system clock  
  *              - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 8000514:	4b02      	ldr	r3, [pc, #8]	; (8000520 <RCC_GetSYSCLKSource+0xc>)
 8000516:	6858      	ldr	r0, [r3, #4]
}
 8000518:	f000 000c 	and.w	r0, r0, #12
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop
 8000520:	40021000 	.word	0x40021000

08000524 <RCC_HCLKConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  
  tmpreg = RCC->CFGR;
 8000524:	4b03      	ldr	r3, [pc, #12]	; (8000534 <RCC_HCLKConfig+0x10>)
 8000526:	685a      	ldr	r2, [r3, #4]
  
  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 8000528:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 800052c:	4310      	orrs	r0, r2
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
 800052e:	6058      	str	r0, [r3, #4]
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	40021000 	.word	0x40021000

08000538 <RCC_PCLK1Config>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  
  tmpreg = RCC->CFGR;
 8000538:	4b03      	ldr	r3, [pc, #12]	; (8000548 <RCC_PCLK1Config+0x10>)
 800053a:	685a      	ldr	r2, [r3, #4]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 800053c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 8000540:	4310      	orrs	r0, r2
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000542:	6058      	str	r0, [r3, #4]
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	40021000 	.word	0x40021000

0800054c <RCC_PCLK2Config>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  
  tmpreg = RCC->CFGR;
 800054c:	4b03      	ldr	r3, [pc, #12]	; (800055c <RCC_PCLK2Config+0x10>)
 800054e:	685a      	ldr	r2, [r3, #4]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 8000550:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 8000554:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000558:	6058      	str	r0, [r3, #4]
 800055a:	4770      	bx	lr
 800055c:	40021000 	.word	0x40021000

08000560 <RCC_GetClocksFreq>:
{
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
  uint32_t apb2presc = 0, ahbpresc = 0;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000560:	4ba8      	ldr	r3, [pc, #672]	; (8000804 <RCC_GetClocksFreq+0x2a4>)
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000562:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
  uint32_t apb2presc = 0, ahbpresc = 0;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000566:	685c      	ldr	r4, [r3, #4]
 8000568:	f004 040c 	and.w	r4, r4, #12
  
  switch (tmp)
 800056c:	2c04      	cmp	r4, #4
 800056e:	f000 8171 	beq.w	8000854 <RCC_GetClocksFreq+0x2f4>
 8000572:	2c08      	cmp	r4, #8
 8000574:	f000 815a 	beq.w	800082c <RCC_GetClocksFreq+0x2cc>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000578:	4ba3      	ldr	r3, [pc, #652]	; (8000808 <RCC_GetClocksFreq+0x2a8>)
 800057a:	6003      	str	r3, [r0, #0]
  uint32_t apb2presc = 0, ahbpresc = 0;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
  
  switch (tmp)
 800057c:	b104      	cbz	r4, 8000580 <RCC_GetClocksFreq+0x20>
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 800057e:	2400      	movs	r4, #0
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
  }
    /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000580:	4da0      	ldr	r5, [pc, #640]	; (8000804 <RCC_GetClocksFreq+0x2a4>)
  tmp = tmp >> 4;
  ahbpresc = APBAHBPrescTable[tmp]; 
 8000582:	49a2      	ldr	r1, [pc, #648]	; (800080c <RCC_GetClocksFreq+0x2ac>)
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
  }
    /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000584:	686a      	ldr	r2, [r5, #4]
  tmp = tmp >> 4;
 8000586:	f3c2 1203 	ubfx	r2, r2, #4, #4
  ahbpresc = APBAHBPrescTable[tmp]; 
 800058a:	5c8f      	ldrb	r7, [r1, r2]
 800058c:	b2ff      	uxtb	r7, r7
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> ahbpresc;
 800058e:	fa23 f207 	lsr.w	r2, r3, r7
 8000592:	6042      	str	r2, [r0, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000594:	686e      	ldr	r6, [r5, #4]
  tmp = tmp >> 8;
 8000596:	f3c6 2602 	ubfx	r6, r6, #8, #3
  presc = APBAHBPrescTable[tmp];
 800059a:	5d8e      	ldrb	r6, [r1, r6]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800059c:	fa22 f606 	lsr.w	r6, r2, r6
 80005a0:	6086      	str	r6, [r0, #8]
  
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 80005a2:	f8d5 c004 	ldr.w	ip, [r5, #4]
  tmp = tmp >> 11;
 80005a6:	f3cc 2cc2 	ubfx	ip, ip, #11, #3
  apb2presc = APBAHBPrescTable[tmp];
 80005aa:	f811 c00c 	ldrb.w	ip, [r1, ip]
 80005ae:	fa5f fc8c 	uxtb.w	ip, ip

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> apb2presc;
 80005b2:	fa22 f20c 	lsr.w	r2, r2, ip
 80005b6:	60c2      	str	r2, [r0, #12]
  
  /* Get ADC12CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE12;
 80005b8:	6aed      	ldr	r5, [r5, #44]	; 0x2c
  tmp = tmp >> 4;
 80005ba:	f3c5 1504 	ubfx	r5, r5, #4, #5
  presc = ADCPrescTable[tmp & 0x0F];
 80005be:	f005 080f 	and.w	r8, r5, #15
 80005c2:	eb01 0848 	add.w	r8, r1, r8, lsl #1
  if (((tmp & 0x10) != 0) && (presc != 0))
 80005c6:	06ed      	lsls	r5, r5, #27
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> apb2presc;
  
  /* Get ADC12CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE12;
  tmp = tmp >> 4;
  presc = ADCPrescTable[tmp & 0x0F];
 80005c8:	f8b8 8010 	ldrh.w	r8, [r8, #16]
 80005cc:	fa1f f888 	uxth.w	r8, r8
  if (((tmp & 0x10) != 0) && (presc != 0))
 80005d0:	d503      	bpl.n	80005da <RCC_GetClocksFreq+0x7a>
 80005d2:	f1b8 0f00 	cmp.w	r8, #0
 80005d6:	f040 811b 	bne.w	8000810 <RCC_GetClocksFreq+0x2b0>
     RCC_Clocks->ADC12CLK_Frequency = pllclk / presc;
  }
  else
  {
   /* ADC12CLK clock frequency is AHB clock */
     RCC_Clocks->ADC12CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80005da:	6103      	str	r3, [r0, #16]
  }
  
  /* Get ADC34CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE34;
 80005dc:	4d89      	ldr	r5, [pc, #548]	; (8000804 <RCC_GetClocksFreq+0x2a4>)
 80005de:	6aed      	ldr	r5, [r5, #44]	; 0x2c
  tmp = tmp >> 9;
 80005e0:	f3c5 2544 	ubfx	r5, r5, #9, #5
  presc = ADCPrescTable[tmp & 0x0F];
 80005e4:	f005 080f 	and.w	r8, r5, #15
 80005e8:	eb01 0148 	add.w	r1, r1, r8, lsl #1
  if (((tmp & 0x10) != 0) && (presc != 0))
 80005ec:	06ed      	lsls	r5, r5, #27
  }
  
  /* Get ADC34CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE34;
  tmp = tmp >> 9;
  presc = ADCPrescTable[tmp & 0x0F];
 80005ee:	8a09      	ldrh	r1, [r1, #16]
 80005f0:	b289      	uxth	r1, r1
  if (((tmp & 0x10) != 0) && (presc != 0))
 80005f2:	d502      	bpl.n	80005fa <RCC_GetClocksFreq+0x9a>
 80005f4:	2900      	cmp	r1, #0
 80005f6:	f040 810f 	bne.w	8000818 <RCC_GetClocksFreq+0x2b8>
     RCC_Clocks->ADC34CLK_Frequency = pllclk / presc;
  }
  else
  {
   /* ADC34CLK clock frequency is AHB clock */
     RCC_Clocks->ADC34CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80005fa:	6143      	str	r3, [r0, #20]
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 80005fc:	4981      	ldr	r1, [pc, #516]	; (8000804 <RCC_GetClocksFreq+0x2a4>)
 80005fe:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8000600:	06c9      	lsls	r1, r1, #27
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 8000602:	bf5c      	itt	pl
 8000604:	4980      	ldrpl	r1, [pc, #512]	; (8000808 <RCC_GetClocksFreq+0x2a8>)
 8000606:	6181      	strpl	r1, [r0, #24]
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }

  /* I2C2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C2SW) != RCC_CFGR3_I2C2SW)
 8000608:	497e      	ldr	r1, [pc, #504]	; (8000804 <RCC_GetClocksFreq+0x2a4>)
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
  }
  else
  {
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800060a:	bf48      	it	mi
 800060c:	6183      	strmi	r3, [r0, #24]
  }

  /* I2C2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C2SW) != RCC_CFGR3_I2C2SW)
 800060e:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8000610:	068d      	lsls	r5, r1, #26
  {
    /* I2C2 Clock is HSI Osc. */
    RCC_Clocks->I2C2CLK_Frequency = HSI_VALUE;
 8000612:	bf5c      	itt	pl
 8000614:	497c      	ldrpl	r1, [pc, #496]	; (8000808 <RCC_GetClocksFreq+0x2a8>)
 8000616:	61c1      	strpl	r1, [r0, #28]
    /* I2C2 Clock is System Clock */
    RCC_Clocks->I2C2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }

  /* I2C3CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C3SW) != RCC_CFGR3_I2C3SW)
 8000618:	497a      	ldr	r1, [pc, #488]	; (8000804 <RCC_GetClocksFreq+0x2a4>)
    RCC_Clocks->I2C2CLK_Frequency = HSI_VALUE;
  }
  else
  {
    /* I2C2 Clock is System Clock */
    RCC_Clocks->I2C2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800061a:	bf48      	it	mi
 800061c:	61c3      	strmi	r3, [r0, #28]
  }

  /* I2C3CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C3SW) != RCC_CFGR3_I2C3SW)
 800061e:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8000620:	0649      	lsls	r1, r1, #25
  {
    /* I2C3 Clock is HSI Osc. */
    RCC_Clocks->I2C3CLK_Frequency = HSI_VALUE;
 8000622:	bf5c      	itt	pl
 8000624:	4978      	ldrpl	r1, [pc, #480]	; (8000808 <RCC_GetClocksFreq+0x2a8>)
 8000626:	6201      	strpl	r1, [r0, #32]
    /* I2C3 Clock is System Clock */
    RCC_Clocks->I2C3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }
    
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM1SW) == RCC_CFGR3_TIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8000628:	4976      	ldr	r1, [pc, #472]	; (8000804 <RCC_GetClocksFreq+0x2a4>)
    RCC_Clocks->I2C3CLK_Frequency = HSI_VALUE;
  }
  else
  {
    /* I2C3 Clock is System Clock */
    RCC_Clocks->I2C3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800062a:	bf48      	it	mi
 800062c:	6203      	strmi	r3, [r0, #32]
  }
    
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM1SW) == RCC_CFGR3_TIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 800062e:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 8000630:	05ed      	lsls	r5, r5, #23
 8000632:	d56b      	bpl.n	800070c <RCC_GetClocksFreq+0x1ac>
 8000634:	429c      	cmp	r4, r3
 8000636:	d102      	bne.n	800063e <RCC_GetClocksFreq+0xde>
  && (apb2presc == ahbpresc)) 
 8000638:	45bc      	cmp	ip, r7
 800063a:	f000 8142 	beq.w	80008c2 <RCC_GetClocksFreq+0x362>
    RCC_Clocks->TIM1CLK_Frequency = pllclk * 2;
  }
  else
  {
    /* TIM1 Clock is APB2 clock. */
    RCC_Clocks->TIM1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 800063e:	6242      	str	r2, [r0, #36]	; 0x24
    RCC_Clocks->TIM3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
  }
#endif /* STM32F303xE */
  
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_HRTIM1SW) == RCC_CFGR3_HRTIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8000640:	6b09      	ldr	r1, [r1, #48]	; 0x30
    /* HRTIM1 Clock is APB2 clock. */
    RCC_Clocks->HRTIM1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
  }
  
    /* TIM8CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM8SW) == RCC_CFGR3_TIM8SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8000642:	4970      	ldr	r1, [pc, #448]	; (8000804 <RCC_GetClocksFreq+0x2a4>)
    RCC_Clocks->HRTIM1CLK_Frequency = pllclk * 2;
  }
  else
  {
    /* HRTIM1 Clock is APB2 clock. */
    RCC_Clocks->HRTIM1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000644:	6282      	str	r2, [r0, #40]	; 0x28
  }
  
    /* TIM8CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM8SW) == RCC_CFGR3_TIM8SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8000646:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 8000648:	05ad      	lsls	r5, r5, #22
 800064a:	d56a      	bpl.n	8000722 <RCC_GetClocksFreq+0x1c2>
 800064c:	429c      	cmp	r4, r3
 800064e:	d102      	bne.n	8000656 <RCC_GetClocksFreq+0xf6>
  && (apb2presc == ahbpresc))
 8000650:	45bc      	cmp	ip, r7
 8000652:	f000 8153 	beq.w	80008fc <RCC_GetClocksFreq+0x39c>
    RCC_Clocks->TIM8CLK_Frequency = pllclk * 2;
  }
  else
  {
    /* TIM8 Clock is APB2 clock. */
    RCC_Clocks->TIM8CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000656:	62c2      	str	r2, [r0, #44]	; 0x2c
  }

    /* TIM15CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM15SW) == RCC_CFGR3_TIM15SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8000658:	6b09      	ldr	r1, [r1, #48]	; 0x30
    /* TIM15 Clock is APB2 clock. */
    RCC_Clocks->TIM15CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
  }
    
    /* TIM16CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM16SW) == RCC_CFGR3_TIM16SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 800065a:	496a      	ldr	r1, [pc, #424]	; (8000804 <RCC_GetClocksFreq+0x2a4>)
    RCC_Clocks->TIM15CLK_Frequency = pllclk * 2;
  }
  else
  {
    /* TIM15 Clock is APB2 clock. */
    RCC_Clocks->TIM15CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 800065c:	64c2      	str	r2, [r0, #76]	; 0x4c
  }
    
    /* TIM16CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM16SW) == RCC_CFGR3_TIM16SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 800065e:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 8000660:	052d      	lsls	r5, r5, #20
 8000662:	d56a      	bpl.n	800073a <RCC_GetClocksFreq+0x1da>
 8000664:	429c      	cmp	r4, r3
 8000666:	d102      	bne.n	800066e <RCC_GetClocksFreq+0x10e>
  && (apb2presc == ahbpresc))
 8000668:	45bc      	cmp	ip, r7
 800066a:	f000 8128 	beq.w	80008be <RCC_GetClocksFreq+0x35e>
    /* TIM16 Clock is APB2 clock. */
    RCC_Clocks->TIM16CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
  }

    /* TIM17CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM17SW) == RCC_CFGR3_TIM17SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 800066e:	6b09      	ldr	r1, [r1, #48]	; 0x30
    /* TIM17 Clock is APB2 clock. */
    RCC_Clocks->TIM16CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
  }
  
  /* TIM20CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM20SW) == RCC_CFGR3_TIM20SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8000670:	4964      	ldr	r1, [pc, #400]	; (8000804 <RCC_GetClocksFreq+0x2a4>)
    RCC_Clocks->TIM17CLK_Frequency = pllclk * 2;
  }
  else
  {
    /* TIM17 Clock is APB2 clock. */
    RCC_Clocks->TIM16CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000672:	6502      	str	r2, [r0, #80]	; 0x50
  }
  
  /* TIM20CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM20SW) == RCC_CFGR3_TIM20SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8000674:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8000676:	040d      	lsls	r5, r1, #16
 8000678:	d46c      	bmi.n	8000754 <RCC_GetClocksFreq+0x1f4>
    RCC_Clocks->TIM20CLK_Frequency = pllclk * 2;
  }
  else
  {
    /* TIM20 Clock is APB2 clock. */
    RCC_Clocks->TIM20CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 800067a:	6582      	str	r2, [r0, #88]	; 0x58
  }
    
  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 800067c:	4961      	ldr	r1, [pc, #388]	; (8000804 <RCC_GetClocksFreq+0x2a4>)
 800067e:	6b0c      	ldr	r4, [r1, #48]	; 0x30
 8000680:	07a4      	lsls	r4, r4, #30
 8000682:	d011      	beq.n	80006a8 <RCC_GetClocksFreq+0x148>
#else
    /* USART Clock is PCLK2 */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
#endif  
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 8000684:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8000686:	f002 0203 	and.w	r2, r2, #3
 800068a:	2a01      	cmp	r2, #1
 800068c:	f000 80e6 	beq.w	800085c <RCC_GetClocksFreq+0x2fc>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 8000690:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8000692:	f002 0203 	and.w	r2, r2, #3
 8000696:	2a02      	cmp	r2, #2
 8000698:	f000 80f0 	beq.w	800087c <RCC_GetClocksFreq+0x31c>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 800069c:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800069e:	f002 0203 	and.w	r2, r2, #3
 80006a2:	2a03      	cmp	r2, #3
 80006a4:	d101      	bne.n	80006aa <RCC_GetClocksFreq+0x14a>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 80006a6:	4a58      	ldr	r2, [pc, #352]	; (8000808 <RCC_GetClocksFreq+0x2a8>)
 80006a8:	6382      	str	r2, [r0, #56]	; 0x38
  }

  /* USART2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
 80006aa:	4a56      	ldr	r2, [pc, #344]	; (8000804 <RCC_GetClocksFreq+0x2a4>)
 80006ac:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80006ae:	f411 3f40 	tst.w	r1, #196608	; 0x30000
 80006b2:	d156      	bne.n	8000762 <RCC_GetClocksFreq+0x202>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 80006b4:	63c6      	str	r6, [r0, #60]	; 0x3c
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
  }    

  /* USART3CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == 0x0)
 80006b6:	4a53      	ldr	r2, [pc, #332]	; (8000804 <RCC_GetClocksFreq+0x2a4>)
 80006b8:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80006ba:	f411 2f40 	tst.w	r1, #786432	; 0xc0000
 80006be:	d16a      	bne.n	8000796 <RCC_GetClocksFreq+0x236>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 80006c0:	6406      	str	r6, [r0, #64]	; 0x40
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
  }
  
    /* UART4CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == 0x0)
 80006c2:	4a50      	ldr	r2, [pc, #320]	; (8000804 <RCC_GetClocksFreq+0x2a4>)
 80006c4:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80006c6:	f411 1f40 	tst.w	r1, #3145728	; 0x300000
 80006ca:	d17d      	bne.n	80007c8 <RCC_GetClocksFreq+0x268>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 80006cc:	6446      	str	r6, [r0, #68]	; 0x44
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART4CLK_Frequency = HSI_VALUE;
  }   
  
  /* UART5CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == 0x0)
 80006ce:	4a4d      	ldr	r2, [pc, #308]	; (8000804 <RCC_GetClocksFreq+0x2a4>)
 80006d0:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80006d2:	f411 0f40 	tst.w	r1, #12582912	; 0xc00000
 80006d6:	f000 8091 	beq.w	80007fc <RCC_GetClocksFreq+0x29c>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_0)
 80006da:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80006dc:	f401 0140 	and.w	r1, r1, #12582912	; 0xc00000
 80006e0:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 80006e4:	f000 809e 	beq.w	8000824 <RCC_GetClocksFreq+0x2c4>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_1)
 80006e8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80006ea:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80006ee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80006f2:	f000 8095 	beq.w	8000820 <RCC_GetClocksFreq+0x2c0>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART5CLK_Frequency = LSE_VALUE;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
 80006f6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80006f8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80006fc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8000700:	d101      	bne.n	8000706 <RCC_GetClocksFreq+0x1a6>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
 8000702:	4b41      	ldr	r3, [pc, #260]	; (8000808 <RCC_GetClocksFreq+0x2a8>)
 8000704:	6483      	str	r3, [r0, #72]	; 0x48
  } 
}
 8000706:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800070a:	4770      	bx	lr
    RCC_Clocks->TIM1CLK_Frequency = pllclk * 2;
  }
  else
  {
    /* TIM1 Clock is APB2 clock. */
    RCC_Clocks->TIM1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 800070c:	6242      	str	r2, [r0, #36]	; 0x24
    RCC_Clocks->TIM3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
  }
#endif /* STM32F303xE */
  
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_HRTIM1SW) == RCC_CFGR3_HRTIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 800070e:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 8000710:	04ed      	lsls	r5, r5, #19
 8000712:	d596      	bpl.n	8000642 <RCC_GetClocksFreq+0xe2>
 8000714:	429c      	cmp	r4, r3
 8000716:	d102      	bne.n	800071e <RCC_GetClocksFreq+0x1be>
  && (apb2presc == ahbpresc)) 
 8000718:	45bc      	cmp	ip, r7
 800071a:	f000 80e8 	beq.w	80008ee <RCC_GetClocksFreq+0x38e>
    RCC_Clocks->HRTIM1CLK_Frequency = pllclk * 2;
  }
  else
  {
    /* HRTIM1 Clock is APB2 clock. */
    RCC_Clocks->HRTIM1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 800071e:	6282      	str	r2, [r0, #40]	; 0x28
  }
  
    /* TIM8CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM8SW) == RCC_CFGR3_TIM8SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8000720:	6b09      	ldr	r1, [r1, #48]	; 0x30
    /* TIM8 Clock is APB2 clock. */
    RCC_Clocks->TIM8CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
  }

    /* TIM15CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM15SW) == RCC_CFGR3_TIM15SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8000722:	4938      	ldr	r1, [pc, #224]	; (8000804 <RCC_GetClocksFreq+0x2a4>)
    RCC_Clocks->TIM8CLK_Frequency = pllclk * 2;
  }
  else
  {
    /* TIM8 Clock is APB2 clock. */
    RCC_Clocks->TIM8CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000724:	62c2      	str	r2, [r0, #44]	; 0x2c
  }

    /* TIM15CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM15SW) == RCC_CFGR3_TIM15SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8000726:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 8000728:	056d      	lsls	r5, r5, #21
 800072a:	d596      	bpl.n	800065a <RCC_GetClocksFreq+0xfa>
 800072c:	429c      	cmp	r4, r3
 800072e:	d102      	bne.n	8000736 <RCC_GetClocksFreq+0x1d6>
  && (apb2presc == ahbpresc))
 8000730:	45bc      	cmp	ip, r7
 8000732:	f000 80b7 	beq.w	80008a4 <RCC_GetClocksFreq+0x344>
    RCC_Clocks->TIM15CLK_Frequency = pllclk * 2;
  }
  else
  {
    /* TIM15 Clock is APB2 clock. */
    RCC_Clocks->TIM15CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000736:	64c2      	str	r2, [r0, #76]	; 0x4c
  }
    
    /* TIM16CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM16SW) == RCC_CFGR3_TIM16SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8000738:	6b09      	ldr	r1, [r1, #48]	; 0x30
    /* TIM16 Clock is APB2 clock. */
    RCC_Clocks->TIM16CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
  }

    /* TIM17CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM17SW) == RCC_CFGR3_TIM17SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 800073a:	4932      	ldr	r1, [pc, #200]	; (8000804 <RCC_GetClocksFreq+0x2a4>)
    RCC_Clocks->TIM16CLK_Frequency = pllclk * 2;
  }
  else
  {
    /* TIM16 Clock is APB2 clock. */
    RCC_Clocks->TIM16CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 800073c:	6502      	str	r2, [r0, #80]	; 0x50
  }

    /* TIM17CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM17SW) == RCC_CFGR3_TIM17SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 800073e:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 8000740:	04ad      	lsls	r5, r5, #18
 8000742:	d595      	bpl.n	8000670 <RCC_GetClocksFreq+0x110>
 8000744:	429c      	cmp	r4, r3
 8000746:	d102      	bne.n	800074e <RCC_GetClocksFreq+0x1ee>
  && (apb2presc == ahbpresc))
 8000748:	45bc      	cmp	ip, r7
 800074a:	f000 80a3 	beq.w	8000894 <RCC_GetClocksFreq+0x334>
    RCC_Clocks->TIM17CLK_Frequency = pllclk * 2;
  }
  else
  {
    /* TIM17 Clock is APB2 clock. */
    RCC_Clocks->TIM16CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 800074e:	6502      	str	r2, [r0, #80]	; 0x50
  }
  
  /* TIM20CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM20SW) == RCC_CFGR3_TIM20SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8000750:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8000752:	e792      	b.n	800067a <RCC_GetClocksFreq+0x11a>
 8000754:	429c      	cmp	r4, r3
 8000756:	d190      	bne.n	800067a <RCC_GetClocksFreq+0x11a>
  && (apb2presc == ahbpresc))
 8000758:	45bc      	cmp	ip, r7
 800075a:	d18e      	bne.n	800067a <RCC_GetClocksFreq+0x11a>
 800075c:	005d      	lsls	r5, r3, #1
  {
    /* TIM20 Clock is 2 * pllclk */
    RCC_Clocks->TIM20CLK_Frequency = pllclk * 2;
 800075e:	6585      	str	r5, [r0, #88]	; 0x58
 8000760:	e78c      	b.n	800067c <RCC_GetClocksFreq+0x11c>
  if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
 8000762:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8000764:	f401 3140 	and.w	r1, r1, #196608	; 0x30000
 8000768:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800076c:	d07c      	beq.n	8000868 <RCC_GetClocksFreq+0x308>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
 800076e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8000770:	f401 3140 	and.w	r1, r1, #196608	; 0x30000
 8000774:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8000778:	f000 8084 	beq.w	8000884 <RCC_GetClocksFreq+0x324>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW)
 800077c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800077e:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8000782:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
 8000786:	bf04      	itt	eq
 8000788:	4a1f      	ldreq	r2, [pc, #124]	; (8000808 <RCC_GetClocksFreq+0x2a8>)
 800078a:	63c2      	streq	r2, [r0, #60]	; 0x3c
  }    

  /* USART3CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == 0x0)
 800078c:	4a1d      	ldr	r2, [pc, #116]	; (8000804 <RCC_GetClocksFreq+0x2a4>)
 800078e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8000790:	f411 2f40 	tst.w	r1, #786432	; 0xc0000
 8000794:	d094      	beq.n	80006c0 <RCC_GetClocksFreq+0x160>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_0)
 8000796:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8000798:	f401 2140 	and.w	r1, r1, #786432	; 0xc0000
 800079c:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 80007a0:	d060      	beq.n	8000864 <RCC_GetClocksFreq+0x304>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_1)
 80007a2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80007a4:	f401 2140 	and.w	r1, r1, #786432	; 0xc0000
 80007a8:	f5b1 2f00 	cmp.w	r1, #524288	; 0x80000
 80007ac:	d062      	beq.n	8000874 <RCC_GetClocksFreq+0x314>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW)
 80007ae:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80007b0:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 80007b4:	f5b2 2f40 	cmp.w	r2, #786432	; 0xc0000
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
 80007b8:	bf04      	itt	eq
 80007ba:	4a13      	ldreq	r2, [pc, #76]	; (8000808 <RCC_GetClocksFreq+0x2a8>)
 80007bc:	6402      	streq	r2, [r0, #64]	; 0x40
  }
  
    /* UART4CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == 0x0)
 80007be:	4a11      	ldr	r2, [pc, #68]	; (8000804 <RCC_GetClocksFreq+0x2a4>)
 80007c0:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80007c2:	f411 1f40 	tst.w	r1, #3145728	; 0x300000
 80007c6:	d081      	beq.n	80006cc <RCC_GetClocksFreq+0x16c>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_0)
 80007c8:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80007ca:	f401 1140 	and.w	r1, r1, #3145728	; 0x300000
 80007ce:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80007d2:	d045      	beq.n	8000860 <RCC_GetClocksFreq+0x300>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_1)
 80007d4:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80007d6:	f401 1140 	and.w	r1, r1, #3145728	; 0x300000
 80007da:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80007de:	d055      	beq.n	800088c <RCC_GetClocksFreq+0x32c>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART4CLK_Frequency = LSE_VALUE;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW)
 80007e0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80007e2:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 80007e6:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART4CLK_Frequency = HSI_VALUE;
 80007ea:	bf04      	itt	eq
 80007ec:	4a06      	ldreq	r2, [pc, #24]	; (8000808 <RCC_GetClocksFreq+0x2a8>)
 80007ee:	6442      	streq	r2, [r0, #68]	; 0x44
  }   
  
  /* UART5CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == 0x0)
 80007f0:	4a04      	ldr	r2, [pc, #16]	; (8000804 <RCC_GetClocksFreq+0x2a4>)
 80007f2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80007f4:	f411 0f40 	tst.w	r1, #12582912	; 0xc00000
 80007f8:	f47f af6f 	bne.w	80006da <RCC_GetClocksFreq+0x17a>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 80007fc:	6486      	str	r6, [r0, #72]	; 0x48
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
  } 
}
 80007fe:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000802:	4770      	bx	lr
 8000804:	40021000 	.word	0x40021000
 8000808:	007a1200 	.word	0x007a1200
 800080c:	20000000 	.word	0x20000000
  tmp = tmp >> 4;
  presc = ADCPrescTable[tmp & 0x0F];
  if (((tmp & 0x10) != 0) && (presc != 0))
  {
     /* ADC12CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC12CLK_Frequency = pllclk / presc;
 8000810:	fbb4 f5f8 	udiv	r5, r4, r8
 8000814:	6105      	str	r5, [r0, #16]
 8000816:	e6e1      	b.n	80005dc <RCC_GetClocksFreq+0x7c>
  tmp = tmp >> 9;
  presc = ADCPrescTable[tmp & 0x0F];
  if (((tmp & 0x10) != 0) && (presc != 0))
  {
     /* ADC34CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC34CLK_Frequency = pllclk / presc;
 8000818:	fbb4 f1f1 	udiv	r1, r4, r1
 800081c:	6141      	str	r1, [r0, #20]
 800081e:	e6ed      	b.n	80005fc <RCC_GetClocksFreq+0x9c>
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_1)
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART5CLK_Frequency = LSE_VALUE;
 8000820:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000824:	6483      	str	r3, [r0, #72]	; 0x48
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
  } 
}
 8000826:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800082a:	4770      	bx	lr
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
      break;
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 800082c:	685a      	ldr	r2, [r3, #4]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 800082e:	6859      	ldr	r1, [r3, #4]
      pllmull = ( pllmull >> 18) + 2;
 8000830:	f3c2 4283 	ubfx	r2, r2, #18, #4
      
      if (pllsource == 0x00)
 8000834:	03ce      	lsls	r6, r1, #15
      break;
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
      pllmull = ( pllmull >> 18) + 2;
 8000836:	f102 0202 	add.w	r2, r2, #2
      
      if (pllsource == 0x00)
 800083a:	d517      	bpl.n	800086c <RCC_GetClocksFreq+0x30c>
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        pllclk = (HSI_VALUE >> 1) * pllmull;
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 800083c:	6adc      	ldr	r4, [r3, #44]	; 0x2c
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 800083e:	4b31      	ldr	r3, [pc, #196]	; (8000904 <RCC_GetClocksFreq+0x3a4>)
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        pllclk = (HSI_VALUE >> 1) * pllmull;
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 8000840:	f004 040f 	and.w	r4, r4, #15
 8000844:	3401      	adds	r4, #1
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 8000846:	fbb3 f4f4 	udiv	r4, r3, r4
 800084a:	fb02 f404 	mul.w	r4, r2, r4
      }
      RCC_Clocks->SYSCLK_Frequency = pllclk;      
 800084e:	6004      	str	r4, [r0, #0]
      break;
 8000850:	4623      	mov	r3, r4
 8000852:	e695      	b.n	8000580 <RCC_GetClocksFreq+0x20>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000854:	4b2b      	ldr	r3, [pc, #172]	; (8000904 <RCC_GetClocksFreq+0x3a4>)
 8000856:	6003      	str	r3, [r0, #0]
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 8000858:	2400      	movs	r4, #0
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
      break;
 800085a:	e691      	b.n	8000580 <RCC_GetClocksFreq+0x20>
#endif  
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800085c:	6383      	str	r3, [r0, #56]	; 0x38
 800085e:	e724      	b.n	80006aa <RCC_GetClocksFreq+0x14a>
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_0)
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000860:	6443      	str	r3, [r0, #68]	; 0x44
 8000862:	e734      	b.n	80006ce <RCC_GetClocksFreq+0x16e>
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_0)
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000864:	6403      	str	r3, [r0, #64]	; 0x40
 8000866:	e72c      	b.n	80006c2 <RCC_GetClocksFreq+0x162>
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000868:	63c3      	str	r3, [r0, #60]	; 0x3c
 800086a:	e724      	b.n	80006b6 <RCC_GetClocksFreq+0x156>
      pllmull = ( pllmull >> 18) + 2;
      
      if (pllsource == 0x00)
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        pllclk = (HSI_VALUE >> 1) * pllmull;
 800086c:	4c26      	ldr	r4, [pc, #152]	; (8000908 <RCC_GetClocksFreq+0x3a8>)
 800086e:	fb04 f402 	mul.w	r4, r4, r2
 8000872:	e7ec      	b.n	800084e <RCC_GetClocksFreq+0x2ee>
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_1)
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
 8000874:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000878:	6402      	str	r2, [r0, #64]	; 0x40
 800087a:	e722      	b.n	80006c2 <RCC_GetClocksFreq+0x162>
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 800087c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000880:	6382      	str	r2, [r0, #56]	; 0x38
 8000882:	e712      	b.n	80006aa <RCC_GetClocksFreq+0x14a>
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
 8000884:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000888:	63c2      	str	r2, [r0, #60]	; 0x3c
 800088a:	e714      	b.n	80006b6 <RCC_GetClocksFreq+0x156>
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_1)
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART4CLK_Frequency = LSE_VALUE;
 800088c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000890:	6442      	str	r2, [r0, #68]	; 0x44
 8000892:	e71c      	b.n	80006ce <RCC_GetClocksFreq+0x16e>
 8000894:	005d      	lsls	r5, r3, #1
    /* TIM17 Clock is APB2 clock. */
    RCC_Clocks->TIM16CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
  }
  
  /* TIM20CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM20SW) == RCC_CFGR3_TIM20SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8000896:	491d      	ldr	r1, [pc, #116]	; (800090c <RCC_GetClocksFreq+0x3ac>)
    /* TIM17CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM17SW) == RCC_CFGR3_TIM17SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
  && (apb2presc == ahbpresc))
  {
    /* TIM17 Clock is 2 * pllclk */
    RCC_Clocks->TIM17CLK_Frequency = pllclk * 2;
 8000898:	6545      	str	r5, [r0, #84]	; 0x54
    /* TIM17 Clock is APB2 clock. */
    RCC_Clocks->TIM16CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
  }
  
  /* TIM20CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM20SW) == RCC_CFGR3_TIM20SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 800089a:	6b09      	ldr	r1, [r1, #48]	; 0x30
 800089c:	040f      	lsls	r7, r1, #16
 800089e:	f53f af5e 	bmi.w	800075e <RCC_GetClocksFreq+0x1fe>
 80008a2:	e6ea      	b.n	800067a <RCC_GetClocksFreq+0x11a>
 80008a4:	0065      	lsls	r5, r4, #1
    /* TIM15 Clock is APB2 clock. */
    RCC_Clocks->TIM15CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
  }
    
    /* TIM16CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM16SW) == RCC_CFGR3_TIM16SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 80008a6:	4919      	ldr	r1, [pc, #100]	; (800090c <RCC_GetClocksFreq+0x3ac>)
    /* TIM15CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM15SW) == RCC_CFGR3_TIM15SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
  && (apb2presc == ahbpresc))
  {
    /* TIM15 Clock is 2 * pllclk */
    RCC_Clocks->TIM15CLK_Frequency = pllclk * 2;
 80008a8:	64c5      	str	r5, [r0, #76]	; 0x4c
    /* TIM15 Clock is APB2 clock. */
    RCC_Clocks->TIM15CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
  }
    
    /* TIM16CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM16SW) == RCC_CFGR3_TIM16SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 80008aa:	6b09      	ldr	r1, [r1, #48]	; 0x30
 80008ac:	0509      	lsls	r1, r1, #20
 80008ae:	f57f af44 	bpl.w	800073a <RCC_GetClocksFreq+0x1da>
    /* TIM16 Clock is APB2 clock. */
    RCC_Clocks->TIM16CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
  }

    /* TIM17CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM17SW) == RCC_CFGR3_TIM17SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 80008b2:	4916      	ldr	r1, [pc, #88]	; (800090c <RCC_GetClocksFreq+0x3ac>)
    /* TIM16CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM16SW) == RCC_CFGR3_TIM16SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
  && (apb2presc == ahbpresc))
  {
    /* TIM16 Clock is 2 * pllclk */
    RCC_Clocks->TIM16CLK_Frequency = pllclk * 2;
 80008b4:	6505      	str	r5, [r0, #80]	; 0x50
    /* TIM16 Clock is APB2 clock. */
    RCC_Clocks->TIM16CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
  }

    /* TIM17CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM17SW) == RCC_CFGR3_TIM17SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 80008b6:	6b09      	ldr	r1, [r1, #48]	; 0x30
 80008b8:	0489      	lsls	r1, r1, #18
 80008ba:	d4ec      	bmi.n	8000896 <RCC_GetClocksFreq+0x336>
 80008bc:	e6d8      	b.n	8000670 <RCC_GetClocksFreq+0x110>
 80008be:	0065      	lsls	r5, r4, #1
 80008c0:	e7f7      	b.n	80008b2 <RCC_GetClocksFreq+0x352>
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM1SW) == RCC_CFGR3_TIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
  && (apb2presc == ahbpresc)) 
  {
    /* TIM1 Clock is 2 * pllclk */
    RCC_Clocks->TIM1CLK_Frequency = pllclk * 2;
 80008c2:	ea4f 0844 	mov.w	r8, r4, lsl #1
 80008c6:	f8c0 8024 	str.w	r8, [r0, #36]	; 0x24
    RCC_Clocks->TIM3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
  }
#endif /* STM32F303xE */
  
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_HRTIM1SW) == RCC_CFGR3_HRTIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 80008ca:	f8d1 9030 	ldr.w	r9, [r1, #48]	; 0x30
 80008ce:	f419 5f80 	tst.w	r9, #4096	; 0x1000
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM1SW) == RCC_CFGR3_TIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
  && (apb2presc == ahbpresc)) 
  {
    /* TIM1 Clock is 2 * pllclk */
    RCC_Clocks->TIM1CLK_Frequency = pllclk * 2;
 80008d2:	4645      	mov	r5, r8
    RCC_Clocks->TIM3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
  }
#endif /* STM32F303xE */
  
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_HRTIM1SW) == RCC_CFGR3_HRTIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 80008d4:	d10c      	bne.n	80008f0 <RCC_GetClocksFreq+0x390>
    RCC_Clocks->HRTIM1CLK_Frequency = pllclk * 2;
  }
  else
  {
    /* HRTIM1 Clock is APB2 clock. */
    RCC_Clocks->HRTIM1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 80008d6:	6282      	str	r2, [r0, #40]	; 0x28
  }
  
    /* TIM8CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM8SW) == RCC_CFGR3_TIM8SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 80008d8:	6b09      	ldr	r1, [r1, #48]	; 0x30
 80008da:	0589      	lsls	r1, r1, #22
 80008dc:	f57f af21 	bpl.w	8000722 <RCC_GetClocksFreq+0x1c2>
 80008e0:	4645      	mov	r5, r8
    /* TIM8 Clock is APB2 clock. */
    RCC_Clocks->TIM8CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
  }

    /* TIM15CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM15SW) == RCC_CFGR3_TIM15SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 80008e2:	490a      	ldr	r1, [pc, #40]	; (800090c <RCC_GetClocksFreq+0x3ac>)
    /* TIM8CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM8SW) == RCC_CFGR3_TIM8SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
  && (apb2presc == ahbpresc))
  {
    /* TIM8 Clock is 2 * pllclk */
    RCC_Clocks->TIM8CLK_Frequency = pllclk * 2;
 80008e4:	62c5      	str	r5, [r0, #44]	; 0x2c
    /* TIM8 Clock is APB2 clock. */
    RCC_Clocks->TIM8CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
  }

    /* TIM15CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM15SW) == RCC_CFGR3_TIM15SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 80008e6:	6b09      	ldr	r1, [r1, #48]	; 0x30
 80008e8:	0549      	lsls	r1, r1, #21
 80008ea:	d4dc      	bmi.n	80008a6 <RCC_GetClocksFreq+0x346>
 80008ec:	e6b5      	b.n	800065a <RCC_GetClocksFreq+0xfa>
 80008ee:	0065      	lsls	r5, r4, #1
    /* HRTIM1 Clock is APB2 clock. */
    RCC_Clocks->HRTIM1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
  }
  
    /* TIM8CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM8SW) == RCC_CFGR3_TIM8SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 80008f0:	4906      	ldr	r1, [pc, #24]	; (800090c <RCC_GetClocksFreq+0x3ac>)
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_HRTIM1SW) == RCC_CFGR3_HRTIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
  && (apb2presc == ahbpresc)) 
  {
    /* HRTIM1 Clock is 2 * pllclk */
    RCC_Clocks->HRTIM1CLK_Frequency = pllclk * 2;
 80008f2:	6285      	str	r5, [r0, #40]	; 0x28
    /* HRTIM1 Clock is APB2 clock. */
    RCC_Clocks->HRTIM1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
  }
  
    /* TIM8CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM8SW) == RCC_CFGR3_TIM8SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 80008f4:	6b09      	ldr	r1, [r1, #48]	; 0x30
 80008f6:	0589      	lsls	r1, r1, #22
 80008f8:	d4f3      	bmi.n	80008e2 <RCC_GetClocksFreq+0x382>
 80008fa:	e712      	b.n	8000722 <RCC_GetClocksFreq+0x1c2>
 80008fc:	ea4f 0844 	mov.w	r8, r4, lsl #1
 8000900:	e7ee      	b.n	80008e0 <RCC_GetClocksFreq+0x380>
 8000902:	bf00      	nop
 8000904:	007a1200 	.word	0x007a1200
 8000908:	003d0900 	.word	0x003d0900
 800090c:	40021000 	.word	0x40021000

08000910 <RCC_ADCCLKConfig>:
  assert_param(IS_RCC_ADCCLK(RCC_PLLCLK));

  tmp = (RCC_PLLCLK >> 28);
  
  /* Clears ADCPRE34 bits */
  if (tmp != 0)
 8000910:	0f03      	lsrs	r3, r0, #28
  {
    RCC->CFGR2 &= ~RCC_CFGR2_ADCPRE34;
 8000912:	4b06      	ldr	r3, [pc, #24]	; (800092c <RCC_ADCCLKConfig+0x1c>)
 8000914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000916:	bf14      	ite	ne
 8000918:	f422 5278 	bicne.w	r2, r2, #15872	; 0x3e00
  }
   /* Clears ADCPRE12 bits */
  else
  {
    RCC->CFGR2 &= ~RCC_CFGR2_ADCPRE12;
 800091c:	f422 72f8 	biceq.w	r2, r2, #496	; 0x1f0
 8000920:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  /* Set ADCPRE bits according to RCC_PLLCLK value */
  RCC->CFGR2 |= RCC_PLLCLK;
 8000922:	4b02      	ldr	r3, [pc, #8]	; (800092c <RCC_ADCCLKConfig+0x1c>)
 8000924:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000926:	4310      	orrs	r0, r2
 8000928:	62d8      	str	r0, [r3, #44]	; 0x2c
 800092a:	4770      	bx	lr
 800092c:	40021000 	.word	0x40021000

08000930 <RCC_I2CCLKConfig>:
  uint32_t tmp = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_I2CCLK(RCC_I2CCLK));

  tmp = (RCC_I2CCLK >> 28);
 8000930:	0f03      	lsrs	r3, r0, #28
  
  /* Clear I2CSW bit */
    switch (tmp)
 8000932:	2b01      	cmp	r3, #1
 8000934:	d012      	beq.n	800095c <RCC_I2CCLKConfig+0x2c>
 8000936:	d30b      	bcc.n	8000950 <RCC_I2CCLKConfig+0x20>
 8000938:	2b02      	cmp	r3, #2
 800093a:	d104      	bne.n	8000946 <RCC_I2CCLKConfig+0x16>
      break;
    case 0x01:
      RCC->CFGR3 &= ~RCC_CFGR3_I2C2SW;
      break;
    case 0x02:
      RCC->CFGR3 &= ~RCC_CFGR3_I2C3SW;
 800093c:	4b0a      	ldr	r3, [pc, #40]	; (8000968 <RCC_I2CCLKConfig+0x38>)
 800093e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000940:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000944:	631a      	str	r2, [r3, #48]	; 0x30
    default:
      break;
  }
  
  /* Set I2CSW bits according to RCC_I2CCLK value */
  RCC->CFGR3 |= RCC_I2CCLK;
 8000946:	4b08      	ldr	r3, [pc, #32]	; (8000968 <RCC_I2CCLKConfig+0x38>)
 8000948:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800094a:	4310      	orrs	r0, r2
 800094c:	6318      	str	r0, [r3, #48]	; 0x30
 800094e:	4770      	bx	lr
  
  /* Clear I2CSW bit */
    switch (tmp)
  {
    case 0x00: 
      RCC->CFGR3 &= ~RCC_CFGR3_I2C1SW;
 8000950:	4b05      	ldr	r3, [pc, #20]	; (8000968 <RCC_I2CCLKConfig+0x38>)
 8000952:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000954:	f022 0210 	bic.w	r2, r2, #16
 8000958:	631a      	str	r2, [r3, #48]	; 0x30
      break;
 800095a:	e7f4      	b.n	8000946 <RCC_I2CCLKConfig+0x16>
    case 0x01:
      RCC->CFGR3 &= ~RCC_CFGR3_I2C2SW;
 800095c:	4b02      	ldr	r3, [pc, #8]	; (8000968 <RCC_I2CCLKConfig+0x38>)
 800095e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000960:	f022 0220 	bic.w	r2, r2, #32
 8000964:	631a      	str	r2, [r3, #48]	; 0x30
      break;
 8000966:	e7ee      	b.n	8000946 <RCC_I2CCLKConfig+0x16>
 8000968:	40021000 	.word	0x40021000

0800096c <RCC_TIMCLKConfig>:
  uint32_t tmp = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_TIMCLK(RCC_TIMCLK));

  tmp = (RCC_TIMCLK >> 28);
 800096c:	0f03      	lsrs	r3, r0, #28
  
  /* Clear TIMSW bit */
  
  switch (tmp)
 800096e:	2b07      	cmp	r3, #7
 8000970:	d80a      	bhi.n	8000988 <RCC_TIMCLKConfig+0x1c>
 8000972:	e8df f003 	tbb	[pc, r3]
 8000976:	1e04      	.short	0x1e04
 8000978:	0e302a24 	.word	0x0e302a24
 800097c:	1813      	.short	0x1813
  {
    case 0x00: 
      RCC->CFGR3 &= ~RCC_CFGR3_TIM1SW;
 800097e:	4b19      	ldr	r3, [pc, #100]	; (80009e4 <RCC_TIMCLKConfig+0x78>)
 8000980:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000982:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000986:	631a      	str	r2, [r3, #48]	; 0x30
    default:
      break;
  }
  
  /* Set I2CSW bits according to RCC_TIMCLK value */
  RCC->CFGR3 |= RCC_TIMCLK;
 8000988:	4b16      	ldr	r3, [pc, #88]	; (80009e4 <RCC_TIMCLKConfig+0x78>)
 800098a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800098c:	4310      	orrs	r0, r2
 800098e:	6318      	str	r0, [r3, #48]	; 0x30
 8000990:	4770      	bx	lr
      break;
    case 0x04:
      RCC->CFGR3 &= ~RCC_CFGR3_TIM17SW;
      break;
    case 0x05:
      RCC->CFGR3 &= ~RCC_CFGR3_TIM20SW;
 8000992:	4b14      	ldr	r3, [pc, #80]	; (80009e4 <RCC_TIMCLKConfig+0x78>)
 8000994:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000996:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800099a:	631a      	str	r2, [r3, #48]	; 0x30
    case 0x06:
      RCC->CFGR3 &= ~RCC_CFGR3_TIM2SW;
 800099c:	4b11      	ldr	r3, [pc, #68]	; (80009e4 <RCC_TIMCLKConfig+0x78>)
 800099e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80009a0:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80009a4:	631a      	str	r2, [r3, #48]	; 0x30
    case 0x07:
      RCC->CFGR3 &= ~RCC_CFGR3_TIM3SW;
 80009a6:	4b0f      	ldr	r3, [pc, #60]	; (80009e4 <RCC_TIMCLKConfig+0x78>)
 80009a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80009aa:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 80009ae:	631a      	str	r2, [r3, #48]	; 0x30
      break;
 80009b0:	e7ea      	b.n	8000988 <RCC_TIMCLKConfig+0x1c>
  {
    case 0x00: 
      RCC->CFGR3 &= ~RCC_CFGR3_TIM1SW;
      break;
    case 0x01:
      RCC->CFGR3 &= ~RCC_CFGR3_TIM8SW;
 80009b2:	4b0c      	ldr	r3, [pc, #48]	; (80009e4 <RCC_TIMCLKConfig+0x78>)
 80009b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80009b6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80009ba:	631a      	str	r2, [r3, #48]	; 0x30
      break;
 80009bc:	e7e4      	b.n	8000988 <RCC_TIMCLKConfig+0x1c>
    case 0x02:
      RCC->CFGR3 &= ~RCC_CFGR3_TIM15SW;
 80009be:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <RCC_TIMCLKConfig+0x78>)
 80009c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80009c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80009c6:	631a      	str	r2, [r3, #48]	; 0x30
      break;
 80009c8:	e7de      	b.n	8000988 <RCC_TIMCLKConfig+0x1c>
    case 0x03:
      RCC->CFGR3 &= ~RCC_CFGR3_TIM16SW;
 80009ca:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <RCC_TIMCLKConfig+0x78>)
 80009cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80009ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80009d2:	631a      	str	r2, [r3, #48]	; 0x30
      break;
 80009d4:	e7d8      	b.n	8000988 <RCC_TIMCLKConfig+0x1c>
    case 0x04:
      RCC->CFGR3 &= ~RCC_CFGR3_TIM17SW;
 80009d6:	4b03      	ldr	r3, [pc, #12]	; (80009e4 <RCC_TIMCLKConfig+0x78>)
 80009d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80009da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80009de:	631a      	str	r2, [r3, #48]	; 0x30
      break;
 80009e0:	e7d2      	b.n	8000988 <RCC_TIMCLKConfig+0x1c>
 80009e2:	bf00      	nop
 80009e4:	40021000 	.word	0x40021000

080009e8 <RCC_HRTIM1CLKConfig>:
{ 
  /* Check the parameters */
  assert_param(IS_RCC_HRTIMCLK(RCC_HRTIMCLK));
  
  /* Clear HRTIMSW bit */
  RCC->CFGR3 &= ~RCC_CFGR3_HRTIM1SW;
 80009e8:	4b04      	ldr	r3, [pc, #16]	; (80009fc <RCC_HRTIM1CLKConfig+0x14>)
 80009ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80009ec:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80009f0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set HRTIMSW bits according to RCC_HRTIMCLK value */
  RCC->CFGR3 |= RCC_HRTIMCLK;
 80009f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80009f4:	4310      	orrs	r0, r2
 80009f6:	6318      	str	r0, [r3, #48]	; 0x30
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	40021000 	.word	0x40021000

08000a00 <RCC_USARTCLKConfig>:
  uint32_t tmp = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_USARTCLK(RCC_USARTCLK));

  tmp = (RCC_USARTCLK >> 28);
 8000a00:	0f03      	lsrs	r3, r0, #28

  /* Clear USARTSW[1:0] bit */
  switch (tmp)
 8000a02:	3b01      	subs	r3, #1
 8000a04:	2b04      	cmp	r3, #4
 8000a06:	d809      	bhi.n	8000a1c <RCC_USARTCLKConfig+0x1c>
 8000a08:	e8df f003 	tbb	[pc, r3]
 8000a0c:	1f191303 	.word	0x1f191303
 8000a10:	0d          	.byte	0x0d
 8000a11:	00          	.byte	0x00
  {
    case 0x01:  /* clear USART1SW */
      RCC->CFGR3 &= ~RCC_CFGR3_USART1SW;
 8000a12:	4b11      	ldr	r3, [pc, #68]	; (8000a58 <RCC_USARTCLKConfig+0x58>)
 8000a14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a16:	f022 0203 	bic.w	r2, r2, #3
 8000a1a:	631a      	str	r2, [r3, #48]	; 0x30
    default:
      break;
  }

  /* Set USARTSW bits according to RCC_USARTCLK value */
  RCC->CFGR3 |= RCC_USARTCLK;
 8000a1c:	4b0e      	ldr	r3, [pc, #56]	; (8000a58 <RCC_USARTCLKConfig+0x58>)
 8000a1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a20:	4310      	orrs	r0, r2
 8000a22:	6318      	str	r0, [r3, #48]	; 0x30
 8000a24:	4770      	bx	lr
      break;
    case 0x04:  /* clear UART4SW */
      RCC->CFGR3 &= ~RCC_CFGR3_UART4SW;
      break;
    case 0x05:  /* clear UART5SW */
      RCC->CFGR3 &= ~RCC_CFGR3_UART5SW;
 8000a26:	4b0c      	ldr	r3, [pc, #48]	; (8000a58 <RCC_USARTCLKConfig+0x58>)
 8000a28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a2a:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8000a2e:	631a      	str	r2, [r3, #48]	; 0x30
      break;
 8000a30:	e7f4      	b.n	8000a1c <RCC_USARTCLKConfig+0x1c>
  {
    case 0x01:  /* clear USART1SW */
      RCC->CFGR3 &= ~RCC_CFGR3_USART1SW;
      break;
    case 0x02:  /* clear USART2SW */
      RCC->CFGR3 &= ~RCC_CFGR3_USART2SW;
 8000a32:	4b09      	ldr	r3, [pc, #36]	; (8000a58 <RCC_USARTCLKConfig+0x58>)
 8000a34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a36:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000a3a:	631a      	str	r2, [r3, #48]	; 0x30
      break;
 8000a3c:	e7ee      	b.n	8000a1c <RCC_USARTCLKConfig+0x1c>
    case 0x03:  /* clear USART3SW */
      RCC->CFGR3 &= ~RCC_CFGR3_USART3SW;
 8000a3e:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <RCC_USARTCLKConfig+0x58>)
 8000a40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a42:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8000a46:	631a      	str	r2, [r3, #48]	; 0x30
      break;
 8000a48:	e7e8      	b.n	8000a1c <RCC_USARTCLKConfig+0x1c>
    case 0x04:  /* clear UART4SW */
      RCC->CFGR3 &= ~RCC_CFGR3_UART4SW;
 8000a4a:	4b03      	ldr	r3, [pc, #12]	; (8000a58 <RCC_USARTCLKConfig+0x58>)
 8000a4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a4e:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8000a52:	631a      	str	r2, [r3, #48]	; 0x30
      break;
 8000a54:	e7e2      	b.n	8000a1c <RCC_USARTCLKConfig+0x1c>
 8000a56:	bf00      	nop
 8000a58:	40021000 	.word	0x40021000

08000a5c <RCC_USBCLKConfig>:
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
 8000a5c:	4b01      	ldr	r3, [pc, #4]	; (8000a64 <RCC_USBCLKConfig+0x8>)
 8000a5e:	6018      	str	r0, [r3, #0]
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	424200d8 	.word	0x424200d8

08000a68 <RCC_RTCCLKConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
 8000a68:	4b02      	ldr	r3, [pc, #8]	; (8000a74 <RCC_RTCCLKConfig+0xc>)
 8000a6a:	6a1a      	ldr	r2, [r3, #32]
 8000a6c:	4310      	orrs	r0, r2
 8000a6e:	6218      	str	r0, [r3, #32]
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	40021000 	.word	0x40021000

08000a78 <RCC_I2SCLKConfig>:
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
 8000a78:	4b01      	ldr	r3, [pc, #4]	; (8000a80 <RCC_I2SCLKConfig+0x8>)
 8000a7a:	6018      	str	r0, [r3, #0]
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	424200dc 	.word	0x424200dc

08000a84 <RCC_RTCCLKCmd>:
void RCC_RTCCLKCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 8000a84:	4b01      	ldr	r3, [pc, #4]	; (8000a8c <RCC_RTCCLKCmd+0x8>)
 8000a86:	6018      	str	r0, [r3, #0]
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	4242043c 	.word	0x4242043c

08000a90 <RCC_BackupResetCmd>:
void RCC_BackupResetCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 8000a90:	4b01      	ldr	r3, [pc, #4]	; (8000a98 <RCC_BackupResetCmd+0x8>)
 8000a92:	6018      	str	r0, [r3, #0]
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	42420440 	.word	0x42420440

08000a9c <RCC_AHBPeriphClockCmd>:
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8000a9c:	4b04      	ldr	r3, [pc, #16]	; (8000ab0 <RCC_AHBPeriphClockCmd+0x14>)
 8000a9e:	695a      	ldr	r2, [r3, #20]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000aa0:	b919      	cbnz	r1, 8000aaa <RCC_AHBPeriphClockCmd+0xe>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8000aa2:	ea22 0000 	bic.w	r0, r2, r0
 8000aa6:	6158      	str	r0, [r3, #20]
 8000aa8:	4770      	bx	lr
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8000aaa:	4310      	orrs	r0, r2
 8000aac:	6158      	str	r0, [r3, #20]
 8000aae:	4770      	bx	lr
 8000ab0:	40021000 	.word	0x40021000

08000ab4 <RCC_APB2PeriphClockCmd>:
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000ab4:	4b04      	ldr	r3, [pc, #16]	; (8000ac8 <RCC_APB2PeriphClockCmd+0x14>)
 8000ab6:	699a      	ldr	r2, [r3, #24]
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000ab8:	b919      	cbnz	r1, 8000ac2 <RCC_APB2PeriphClockCmd+0xe>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000aba:	ea22 0000 	bic.w	r0, r2, r0
 8000abe:	6198      	str	r0, [r3, #24]
 8000ac0:	4770      	bx	lr
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000ac2:	4310      	orrs	r0, r2
 8000ac4:	6198      	str	r0, [r3, #24]
 8000ac6:	4770      	bx	lr
 8000ac8:	40021000 	.word	0x40021000

08000acc <RCC_APB1PeriphClockCmd>:
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000acc:	4b04      	ldr	r3, [pc, #16]	; (8000ae0 <RCC_APB1PeriphClockCmd+0x14>)
 8000ace:	69da      	ldr	r2, [r3, #28]
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000ad0:	b919      	cbnz	r1, 8000ada <RCC_APB1PeriphClockCmd+0xe>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000ad2:	ea22 0000 	bic.w	r0, r2, r0
 8000ad6:	61d8      	str	r0, [r3, #28]
 8000ad8:	4770      	bx	lr
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000ada:	4310      	orrs	r0, r2
 8000adc:	61d8      	str	r0, [r3, #28]
 8000ade:	4770      	bx	lr
 8000ae0:	40021000 	.word	0x40021000

08000ae4 <RCC_AHBPeriphResetCmd>:
  assert_param(IS_RCC_AHB_RST_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHBRSTR |= RCC_AHBPeriph;
 8000ae4:	4b04      	ldr	r3, [pc, #16]	; (8000af8 <RCC_AHBPeriphResetCmd+0x14>)
 8000ae6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB_RST_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000ae8:	b919      	cbnz	r1, 8000af2 <RCC_AHBPeriphResetCmd+0xe>
  {
    RCC->AHBRSTR |= RCC_AHBPeriph;
  }
  else
  {
    RCC->AHBRSTR &= ~RCC_AHBPeriph;
 8000aea:	ea22 0000 	bic.w	r0, r2, r0
 8000aee:	6298      	str	r0, [r3, #40]	; 0x28
 8000af0:	4770      	bx	lr
  assert_param(IS_RCC_AHB_RST_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHBRSTR |= RCC_AHBPeriph;
 8000af2:	4310      	orrs	r0, r2
 8000af4:	6298      	str	r0, [r3, #40]	; 0x28
 8000af6:	4770      	bx	lr
 8000af8:	40021000 	.word	0x40021000

08000afc <RCC_APB2PeriphResetCmd>:
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8000afc:	4b04      	ldr	r3, [pc, #16]	; (8000b10 <RCC_APB2PeriphResetCmd+0x14>)
 8000afe:	68da      	ldr	r2, [r3, #12]
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000b00:	b919      	cbnz	r1, 8000b0a <RCC_APB2PeriphResetCmd+0xe>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8000b02:	ea22 0000 	bic.w	r0, r2, r0
 8000b06:	60d8      	str	r0, [r3, #12]
 8000b08:	4770      	bx	lr
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8000b0a:	4310      	orrs	r0, r2
 8000b0c:	60d8      	str	r0, [r3, #12]
 8000b0e:	4770      	bx	lr
 8000b10:	40021000 	.word	0x40021000

08000b14 <RCC_APB1PeriphResetCmd>:
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8000b14:	4b04      	ldr	r3, [pc, #16]	; (8000b28 <RCC_APB1PeriphResetCmd+0x14>)
 8000b16:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000b18:	b919      	cbnz	r1, 8000b22 <RCC_APB1PeriphResetCmd+0xe>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8000b1a:	ea22 0000 	bic.w	r0, r2, r0
 8000b1e:	6118      	str	r0, [r3, #16]
 8000b20:	4770      	bx	lr
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8000b22:	4310      	orrs	r0, r2
 8000b24:	6118      	str	r0, [r3, #16]
 8000b26:	4770      	bx	lr
 8000b28:	40021000 	.word	0x40021000

08000b2c <RCC_ITConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR[13:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8000b2c:	4b04      	ldr	r3, [pc, #16]	; (8000b40 <RCC_ITConfig+0x14>)
 8000b2e:	781a      	ldrb	r2, [r3, #0]
{
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000b30:	b919      	cbnz	r1, 8000b3a <RCC_ITConfig+0xe>
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
  }
  else
  {
    /* Perform Byte access to RCC_CIR[13:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 8000b32:	ea22 0000 	bic.w	r0, r2, r0
 8000b36:	7018      	strb	r0, [r3, #0]
 8000b38:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR[13:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8000b3a:	4310      	orrs	r0, r2
 8000b3c:	7018      	strb	r0, [r3, #0]
 8000b3e:	4770      	bx	lr
 8000b40:	40021009 	.word	0x40021009

08000b44 <RCC_GetFlagStatus>:
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;

   if (tmp == 0)               /* The flag to check is in CR register */
 8000b44:	0943      	lsrs	r3, r0, #5
 8000b46:	d108      	bne.n	8000b5a <RCC_GetFlagStatus+0x16>
  {
    statusreg = RCC->CR;
 8000b48:	4b0f      	ldr	r3, [pc, #60]	; (8000b88 <RCC_GetFlagStatus+0x44>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;

  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8000b4c:	f000 001f 	and.w	r0, r0, #31
 8000b50:	fa23 f000 	lsr.w	r0, r3, r0
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
}
 8000b54:	f000 0001 	and.w	r0, r0, #1
 8000b58:	4770      	bx	lr

   if (tmp == 0)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
  }
  else if (tmp == 1)          /* The flag to check is in BDCR register */
 8000b5a:	2b01      	cmp	r3, #1
 8000b5c:	d00b      	beq.n	8000b76 <RCC_GetFlagStatus+0x32>
  {
    statusreg = RCC->BDCR;
  }
  else if (tmp == 4)          /* The flag to check is in CFGR register */
 8000b5e:	2b04      	cmp	r3, #4
  {
    statusreg = RCC->CFGR;
 8000b60:	4b09      	ldr	r3, [pc, #36]	; (8000b88 <RCC_GetFlagStatus+0x44>)
 8000b62:	bf0c      	ite	eq
 8000b64:	685b      	ldreq	r3, [r3, #4]
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8000b66:	6a5b      	ldrne	r3, [r3, #36]	; 0x24
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;

  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8000b68:	f000 001f 	and.w	r0, r0, #31
 8000b6c:	fa23 f000 	lsr.w	r0, r3, r0
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
}
 8000b70:	f000 0001 	and.w	r0, r0, #1
 8000b74:	4770      	bx	lr
  {
    statusreg = RCC->CR;
  }
  else if (tmp == 1)          /* The flag to check is in BDCR register */
  {
    statusreg = RCC->BDCR;
 8000b76:	4b04      	ldr	r3, [pc, #16]	; (8000b88 <RCC_GetFlagStatus+0x44>)
 8000b78:	6a1b      	ldr	r3, [r3, #32]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;

  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8000b7a:	f000 001f 	and.w	r0, r0, #31
 8000b7e:	fa23 f000 	lsr.w	r0, r3, r0
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
}
 8000b82:	f000 0001 	and.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	40021000 	.word	0x40021000

08000b8c <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8000b8c:	b500      	push	{lr}
 8000b8e:	b083      	sub	sp, #12
  __IO uint32_t StartUpCounter = 0;
 8000b90:	2300      	movs	r3, #0
 8000b92:	9301      	str	r3, [sp, #4]
 8000b94:	e000      	b.n	8000b98 <RCC_WaitForHSEStartUp+0xc>
  /* Wait till HSE is ready and if timeout is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
    StartUpCounter++;  
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 8000b96:	b948      	cbnz	r0, 8000bac <RCC_WaitForHSEStartUp+0x20>
  FlagStatus HSEStatus = RESET;
  
  /* Wait till HSE is ready and if timeout is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 8000b98:	2011      	movs	r0, #17
 8000b9a:	f7ff ffd3 	bl	8000b44 <RCC_GetFlagStatus>
    StartUpCounter++;  
 8000b9e:	9b01      	ldr	r3, [sp, #4]
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	9301      	str	r3, [sp, #4]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 8000ba4:	9b01      	ldr	r3, [sp, #4]
 8000ba6:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8000baa:	d1f4      	bne.n	8000b96 <RCC_WaitForHSEStartUp+0xa>
  
  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 8000bac:	2011      	movs	r0, #17
 8000bae:	f7ff ffc9 	bl	8000b44 <RCC_GetFlagStatus>
  else
  {
    status = ERROR;
  }  
  return (status);
}
 8000bb2:	3000      	adds	r0, #0
 8000bb4:	bf18      	it	ne
 8000bb6:	2001      	movne	r0, #1
 8000bb8:	b003      	add	sp, #12
 8000bba:	f85d fb04 	ldr.w	pc, [sp], #4
 8000bbe:	bf00      	nop

08000bc0 <RCC_ClearFlag>:
  * @retval None
  */
void RCC_ClearFlag(void)
{
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 8000bc0:	4b02      	ldr	r3, [pc, #8]	; (8000bcc <RCC_ClearFlag+0xc>)
 8000bc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000bc4:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000bc8:	625a      	str	r2, [r3, #36]	; 0x24
 8000bca:	4770      	bx	lr
 8000bcc:	40021000 	.word	0x40021000

08000bd0 <RCC_GetITStatus>:
  
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));
  
  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 8000bd0:	4b03      	ldr	r3, [pc, #12]	; (8000be0 <RCC_GetITStatus+0x10>)
 8000bd2:	689b      	ldr	r3, [r3, #8]
 8000bd4:	4218      	tst	r0, r3
  {
    bitstatus = RESET;
  }
  /* Return the RCC_IT status */
  return  bitstatus;
}
 8000bd6:	bf0c      	ite	eq
 8000bd8:	2000      	moveq	r0, #0
 8000bda:	2001      	movne	r0, #1
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	40021000 	.word	0x40021000

08000be4 <RCC_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));
  
  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 8000be4:	4b01      	ldr	r3, [pc, #4]	; (8000bec <RCC_ClearITPendingBit+0x8>)
 8000be6:	7018      	strb	r0, [r3, #0]
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	4002100a 	.word	0x4002100a

08000bf0 <USART_DeInit>:
  * @param  USARTx: Select the USART peripheral. This parameter can be one of the 
  *         following values: USART1 or USART2 or USART3 or UART4 or UART5.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 8000bf0:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 8000bf2:	4b26      	ldr	r3, [pc, #152]	; (8000c8c <USART_DeInit+0x9c>)
 8000bf4:	4298      	cmp	r0, r3
 8000bf6:	d018      	beq.n	8000c2a <USART_DeInit+0x3a>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
  }
  else if (USARTx == USART2)
 8000bf8:	4b25      	ldr	r3, [pc, #148]	; (8000c90 <USART_DeInit+0xa0>)
 8000bfa:	4298      	cmp	r0, r3
 8000bfc:	d021      	beq.n	8000c42 <USART_DeInit+0x52>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
  }
  else if (USARTx == USART3)
 8000bfe:	4b25      	ldr	r3, [pc, #148]	; (8000c94 <USART_DeInit+0xa4>)
 8000c00:	4298      	cmp	r0, r3
 8000c02:	d02a      	beq.n	8000c5a <USART_DeInit+0x6a>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
  }
  else if (USARTx == UART4)
 8000c04:	4b24      	ldr	r3, [pc, #144]	; (8000c98 <USART_DeInit+0xa8>)
 8000c06:	4298      	cmp	r0, r3
 8000c08:	d033      	beq.n	8000c72 <USART_DeInit+0x82>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
  }
  else
  {
    if  (USARTx == UART5)
 8000c0a:	4b24      	ldr	r3, [pc, #144]	; (8000c9c <USART_DeInit+0xac>)
 8000c0c:	4298      	cmp	r0, r3
 8000c0e:	d000      	beq.n	8000c12 <USART_DeInit+0x22>
 8000c10:	bd08      	pop	{r3, pc}
    {
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 8000c12:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000c16:	2101      	movs	r1, #1
 8000c18:	f7ff ff7c 	bl	8000b14 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 8000c1c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000c20:	2100      	movs	r1, #0
    }
  }
}
 8000c22:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if  (USARTx == UART5)
    {
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 8000c26:	f7ff bf75 	b.w	8000b14 <RCC_APB1PeriphResetCmd>
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 8000c2a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000c2e:	2101      	movs	r1, #1
 8000c30:	f7ff ff64 	bl	8000afc <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 8000c34:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000c38:	2100      	movs	r1, #0
    {
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
    }
  }
}
 8000c3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 8000c3e:	f7ff bf5d 	b.w	8000afc <RCC_APB2PeriphResetCmd>
  }
  else if (USARTx == USART2)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 8000c42:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000c46:	2101      	movs	r1, #1
 8000c48:	f7ff ff64 	bl	8000b14 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 8000c4c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000c50:	2100      	movs	r1, #0
    {
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
    }
  }
}
 8000c52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
  }
  else if (USARTx == USART2)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 8000c56:	f7ff bf5d 	b.w	8000b14 <RCC_APB1PeriphResetCmd>
  }
  else if (USARTx == USART3)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 8000c5a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000c5e:	2101      	movs	r1, #1
 8000c60:	f7ff ff58 	bl	8000b14 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 8000c64:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000c68:	2100      	movs	r1, #0
    {
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
    }
  }
}
 8000c6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
  }
  else if (USARTx == USART3)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 8000c6e:	f7ff bf51 	b.w	8000b14 <RCC_APB1PeriphResetCmd>
  }
  else if (USARTx == UART4)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 8000c72:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000c76:	2101      	movs	r1, #1
 8000c78:	f7ff ff4c 	bl	8000b14 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 8000c7c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000c80:	2100      	movs	r1, #0
    {
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
    }
  }
}
 8000c82:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
  }
  else if (USARTx == UART4)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 8000c86:	f7ff bf45 	b.w	8000b14 <RCC_APB1PeriphResetCmd>
 8000c8a:	bf00      	nop
 8000c8c:	40013800 	.word	0x40013800
 8000c90:	40004400 	.word	0x40004400
 8000c94:	40004800 	.word	0x40004800
 8000c98:	40004c00 	.word	0x40004c00
 8000c9c:	40005000 	.word	0x40005000

08000ca0 <USART_Init>:
  assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
  assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
  assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
  
  /* Disable USART */
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 8000ca0:	6803      	ldr	r3, [r0, #0]
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *         that contains the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000ca2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ca4:	4604      	mov	r4, r0
 8000ca6:	460d      	mov	r5, r1
  assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
  assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
  assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
  
  /* Disable USART */
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 8000ca8:	f023 0301 	bic.w	r3, r3, #1
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
  
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8000cac:	688f      	ldr	r7, [r1, #8]
  
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000cae:	68ce      	ldr	r6, [r1, #12]
 8000cb0:	6928      	ldr	r0, [r5, #16]
 8000cb2:	6849      	ldr	r1, [r1, #4]
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
  
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8000cb4:	696a      	ldr	r2, [r5, #20]
  assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
  assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
  assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
  
  /* Disable USART */
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 8000cb6:	6023      	str	r3, [r4, #0]
  
  /*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000cb8:	6863      	ldr	r3, [r4, #4]
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8000cba:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8000cbe:	433b      	orrs	r3, r7
  
  /* Write to USART CR2 */
  USARTx->CR2 = tmpreg;
 8000cc0:	6063      	str	r3, [r4, #4]
  
  /*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8000cc2:	6823      	ldr	r3, [r4, #0]
  
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000cc4:	4331      	orrs	r1, r6
  USARTx->CR2 = tmpreg;
  
  /*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8000cc6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
  
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000cca:	4301      	orrs	r1, r0
  USARTx->CR2 = tmpreg;
  
  /*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8000ccc:	f023 030c 	bic.w	r3, r3, #12
  
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000cd0:	430b      	orrs	r3, r1
    USART_InitStruct->USART_Mode;
  
  /* Write to USART CR1 */
  USARTx->CR1 = tmpreg;
 8000cd2:	6023      	str	r3, [r4, #0]
  
  /*---------------------------- USART CR3 Configuration -----------------------*/
  tmpreg = USARTx->CR3;
 8000cd4:	68a3      	ldr	r3, [r4, #8]
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8000cd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8000cda:	4313      	orrs	r3, r2
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *         that contains the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000cdc:	b099      	sub	sp, #100	; 0x64
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
  
  /* Write to USART CR3 */
  USARTx->CR3 = tmpreg;
 8000cde:	60a3      	str	r3, [r4, #8]
  
  /*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8000ce0:	a801      	add	r0, sp, #4
 8000ce2:	f7ff fc3d 	bl	8000560 <RCC_GetClocksFreq>
  
  if (USARTx == USART1)
 8000ce6:	4b17      	ldr	r3, [pc, #92]	; (8000d44 <USART_Init+0xa4>)
 8000ce8:	429c      	cmp	r4, r3
 8000cea:	d024      	beq.n	8000d36 <USART_Init+0x96>
  {
    apbclock = RCC_ClocksStatus.USART1CLK_Frequency;
  }
  else if (USARTx == USART2)
 8000cec:	4b16      	ldr	r3, [pc, #88]	; (8000d48 <USART_Init+0xa8>)
 8000cee:	429c      	cmp	r4, r3
 8000cf0:	d023      	beq.n	8000d3a <USART_Init+0x9a>
  {
    apbclock = RCC_ClocksStatus.USART2CLK_Frequency;
  }
  else if (USARTx == USART3)
 8000cf2:	4b16      	ldr	r3, [pc, #88]	; (8000d4c <USART_Init+0xac>)
 8000cf4:	429c      	cmp	r4, r3
 8000cf6:	d022      	beq.n	8000d3e <USART_Init+0x9e>
  {
    apbclock = RCC_ClocksStatus.USART3CLK_Frequency;
  }
  else if (USARTx == UART4)
 8000cf8:	4b15      	ldr	r3, [pc, #84]	; (8000d50 <USART_Init+0xb0>)
 8000cfa:	429c      	cmp	r4, r3
  {
    apbclock = RCC_ClocksStatus.UART4CLK_Frequency;
 8000cfc:	bf0c      	ite	eq
 8000cfe:	9912      	ldreq	r1, [sp, #72]	; 0x48
  }
  else 
  {
    apbclock = RCC_ClocksStatus.UART5CLK_Frequency;
 8000d00:	9913      	ldrne	r1, [sp, #76]	; 0x4c
  }  
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000d02:	6823      	ldr	r3, [r4, #0]
  {
    /* (divider * 10) computing in case Oversampling mode is 8 Samples */
    divider = (uint32_t)((2 * apbclock) / (USART_InitStruct->USART_BaudRate));
 8000d04:	682a      	ldr	r2, [r5, #0]
  {
    apbclock = RCC_ClocksStatus.UART5CLK_Frequency;
  }  
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000d06:	0418      	lsls	r0, r3, #16
  {
    /* (divider * 10) computing in case Oversampling mode is 8 Samples */
    divider = (uint32_t)((2 * apbclock) / (USART_InitStruct->USART_BaudRate));
 8000d08:	bf48      	it	mi
 8000d0a:	0049      	lslmi	r1, r1, #1
    tmpreg  = (uint32_t)((2 * apbclock) % (USART_InitStruct->USART_BaudRate));
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* (divider * 10) computing in case Oversampling mode is 16 Samples */
    divider = (uint32_t)((apbclock) / (USART_InitStruct->USART_BaudRate));
 8000d0c:	fbb1 f3f2 	udiv	r3, r1, r2
    tmpreg  = (uint32_t)((apbclock) % (USART_InitStruct->USART_BaudRate));
 8000d10:	fb02 1113 	mls	r1, r2, r3, r1
  }
  
  /* round the divider : if fractional part i greater than 0.5 increment divider */
  if (tmpreg >=  (USART_InitStruct->USART_BaudRate) / 2)
 8000d14:	ebb1 0f52 	cmp.w	r1, r2, lsr #1
  {
    divider++;
  } 
  
  /* Implement the divider in case Oversampling mode is 8 Samples */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000d18:	6822      	ldr	r2, [r4, #0]
  }
  
  /* round the divider : if fractional part i greater than 0.5 increment divider */
  if (tmpreg >=  (USART_InitStruct->USART_BaudRate) / 2)
  {
    divider++;
 8000d1a:	bf28      	it	cs
 8000d1c:	3301      	addcs	r3, #1
  } 
  
  /* Implement the divider in case Oversampling mode is 8 Samples */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000d1e:	0412      	lsls	r2, r2, #16
 8000d20:	d505      	bpl.n	8000d2e <USART_Init+0x8e>
  {
    /* get the LSB of divider and shift it to the right by 1 bit */
    tmpreg = (divider & (uint16_t)0x000F) >> 1;
    
    /* update the divider value */
    divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 8000d22:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8000d26:	401a      	ands	r2, r3
  
  /* Implement the divider in case Oversampling mode is 8 Samples */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
  {
    /* get the LSB of divider and shift it to the right by 1 bit */
    tmpreg = (divider & (uint16_t)0x000F) >> 1;
 8000d28:	f3c3 0342 	ubfx	r3, r3, #1, #3
    
    /* update the divider value */
    divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 8000d2c:	4313      	orrs	r3, r2
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)divider;
 8000d2e:	b29b      	uxth	r3, r3
 8000d30:	81a3      	strh	r3, [r4, #12]
}
 8000d32:	b019      	add	sp, #100	; 0x64
 8000d34:	bdf0      	pop	{r4, r5, r6, r7, pc}
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
  
  if (USARTx == USART1)
  {
    apbclock = RCC_ClocksStatus.USART1CLK_Frequency;
 8000d36:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8000d38:	e7e3      	b.n	8000d02 <USART_Init+0x62>
  }
  else if (USARTx == USART2)
  {
    apbclock = RCC_ClocksStatus.USART2CLK_Frequency;
 8000d3a:	9910      	ldr	r1, [sp, #64]	; 0x40
 8000d3c:	e7e1      	b.n	8000d02 <USART_Init+0x62>
  }
  else if (USARTx == USART3)
  {
    apbclock = RCC_ClocksStatus.USART3CLK_Frequency;
 8000d3e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8000d40:	e7df      	b.n	8000d02 <USART_Init+0x62>
 8000d42:	bf00      	nop
 8000d44:	40013800 	.word	0x40013800
 8000d48:	40004400 	.word	0x40004400
 8000d4c:	40004800 	.word	0x40004800
 8000d50:	40004c00 	.word	0x40004c00

08000d54 <USART_StructInit>:
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 8000d54:	2300      	movs	r3, #0
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 8000d56:	f44f 5116 	mov.w	r1, #9600	; 0x2580
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
  USART_InitStruct->USART_Parity = USART_Parity_No ;
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8000d5a:	220c      	movs	r2, #12
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 8000d5c:	6001      	str	r1, [r0, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
  USART_InitStruct->USART_Parity = USART_Parity_No ;
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8000d5e:	6102      	str	r2, [r0, #16]
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 8000d60:	6043      	str	r3, [r0, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 8000d62:	6083      	str	r3, [r0, #8]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 8000d64:	60c3      	str	r3, [r0, #12]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8000d66:	6143      	str	r3, [r0, #20]
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop

08000d6c <USART_ClockInit>:
  *         structure that contains the configuration information for the specified
  *         USART peripheral.
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 8000d6c:	b430      	push	{r4, r5}
  /* Configure the USART Clock, CPOL, CPHA, LastBit and SSM ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)(USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 8000d6e:	e891 0028 	ldmia.w	r1, {r3, r5}
 8000d72:	688c      	ldr	r4, [r1, #8]
  assert_param(IS_USART_CLOCK(USART_ClockInitStruct->USART_Clock));
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000d74:	6842      	ldr	r2, [r0, #4]
  /* Configure the USART Clock, CPOL, CPHA, LastBit and SSM ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)(USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 8000d76:	68c9      	ldr	r1, [r1, #12]
 8000d78:	432b      	orrs	r3, r5
 8000d7a:	4323      	orrs	r3, r4
 8000d7c:	430b      	orrs	r3, r1
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear CLKEN, CPOL, CPHA, LBCL and SSM bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 8000d7e:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
  /* Configure the USART Clock, CPOL, CPHA, LastBit and SSM ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)(USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 8000d82:	4313      	orrs	r3, r2
                       USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit);
  /* Write to USART CR2 */
  USARTx->CR2 = tmpreg;
 8000d84:	6043      	str	r3, [r0, #4]
}
 8000d86:	bc30      	pop	{r4, r5}
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop

08000d8c <USART_ClockStructInit>:
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	6003      	str	r3, [r0, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 8000d90:	6043      	str	r3, [r0, #4]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 8000d92:	6083      	str	r3, [r0, #8]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 8000d94:	60c3      	str	r3, [r0, #12]
 8000d96:	4770      	bx	lr

08000d98 <USART_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8000d98:	6803      	ldr	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000d9a:	b919      	cbnz	r1, 8000da4 <USART_Cmd+0xc>
    USARTx->CR1 |= USART_CR1_UE;
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 8000d9c:	f023 0301 	bic.w	r3, r3, #1
 8000da0:	6003      	str	r3, [r0, #0]
 8000da2:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8000da4:	f043 0301 	orr.w	r3, r3, #1
 8000da8:	6003      	str	r3, [r0, #0]
 8000daa:	4770      	bx	lr

08000dac <USART_DirectionModeCmd>:

  if (NewState != DISABLE)
  {
    /* Enable the USART's transfer interface by setting the TE and/or RE bits 
       in the USART CR1 register */
    USARTx->CR1 |= USART_DirectionMode;
 8000dac:	6803      	ldr	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_MODE(USART_DirectionMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 8000dae:	b91a      	cbnz	r2, 8000db8 <USART_DirectionModeCmd+0xc>
  }
  else
  {
    /* Disable the USART's transfer interface by clearing the TE and/or RE bits
       in the USART CR3 register */
    USARTx->CR1 &= (uint32_t)~USART_DirectionMode;
 8000db0:	ea23 0101 	bic.w	r1, r3, r1
 8000db4:	6001      	str	r1, [r0, #0]
 8000db6:	4770      	bx	lr

  if (NewState != DISABLE)
  {
    /* Enable the USART's transfer interface by setting the TE and/or RE bits 
       in the USART CR1 register */
    USARTx->CR1 |= USART_DirectionMode;
 8000db8:	4319      	orrs	r1, r3
 8000dba:	6001      	str	r1, [r0, #0]
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop

08000dc0 <USART_OverSampling8Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 8000dc0:	6803      	ldr	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000dc2:	b919      	cbnz	r1, 8000dcc <USART_OverSampling8Cmd+0xc>
    USARTx->CR1 |= USART_CR1_OVER8;
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_OVER8);
 8000dc4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000dc8:	6003      	str	r3, [r0, #0]
 8000dca:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 8000dcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000dd0:	6003      	str	r3, [r0, #0]
 8000dd2:	4770      	bx	lr

08000dd4 <USART_OneBitMethodCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the one bit method by setting the ONEBIT bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 8000dd4:	6883      	ldr	r3, [r0, #8]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000dd6:	b919      	cbnz	r1, 8000de0 <USART_OneBitMethodCmd+0xc>
    USARTx->CR3 |= USART_CR3_ONEBIT;
  }
  else
  {
    /* Disable the one bit method by clearing the ONEBIT bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_ONEBIT);
 8000dd8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000ddc:	6083      	str	r3, [r0, #8]
 8000dde:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the one bit method by setting the ONEBIT bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 8000de0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000de4:	6083      	str	r3, [r0, #8]
 8000de6:	4770      	bx	lr

08000de8 <USART_MSBFirstCmd>:

  if (NewState != DISABLE)
  {
    /* Enable the most significant bit first transmitted/received following the
       start bit by setting the MSBFIRST bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_MSBFIRST;
 8000de8:	6843      	ldr	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000dea:	b919      	cbnz	r1, 8000df4 <USART_MSBFirstCmd+0xc>
  }
  else
  {
    /* Disable the most significant bit first transmitted/received following the
       start bit by clearing the MSBFIRST bit in the CR2 register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_MSBFIRST);
 8000dec:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8000df0:	6043      	str	r3, [r0, #4]
 8000df2:	4770      	bx	lr

  if (NewState != DISABLE)
  {
    /* Enable the most significant bit first transmitted/received following the
       start bit by setting the MSBFIRST bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_MSBFIRST;
 8000df4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000df8:	6043      	str	r3, [r0, #4]
 8000dfa:	4770      	bx	lr

08000dfc <USART_DataInvCmd>:

  if (NewState != DISABLE)
  {
    /* Enable the binary data inversion feature by setting the DATAINV bit in
       the CR2 register */
    USARTx->CR2 |= USART_CR2_DATAINV;
 8000dfc:	6843      	ldr	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000dfe:	b919      	cbnz	r1, 8000e08 <USART_DataInvCmd+0xc>
  }
  else
  {
    /* Disable the binary data inversion feature by clearing the DATAINV bit in
       the CR2 register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_DATAINV);
 8000e00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e04:	6043      	str	r3, [r0, #4]
 8000e06:	4770      	bx	lr

  if (NewState != DISABLE)
  {
    /* Enable the binary data inversion feature by setting the DATAINV bit in
       the CR2 register */
    USARTx->CR2 |= USART_CR2_DATAINV;
 8000e08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e0c:	6043      	str	r3, [r0, #4]
 8000e0e:	4770      	bx	lr

08000e10 <USART_InvPinCmd>:

  if (NewState != DISABLE)
  {
    /* Enable the active level inversion for selected pins by setting the TXINV 
       and/or RXINV bits in the USART CR2 register */
    USARTx->CR2 |= USART_InvPin;
 8000e10:	6843      	ldr	r3, [r0, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_INVERSTION_PIN(USART_InvPin));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 8000e12:	b91a      	cbnz	r2, 8000e1c <USART_InvPinCmd+0xc>
  }
  else
  {
    /* Disable the active level inversion for selected requests by clearing the 
       TXINV and/or RXINV bits in the USART CR2 register */
    USARTx->CR2 &= (uint32_t)~USART_InvPin;
 8000e14:	ea23 0101 	bic.w	r1, r3, r1
 8000e18:	6041      	str	r1, [r0, #4]
 8000e1a:	4770      	bx	lr

  if (NewState != DISABLE)
  {
    /* Enable the active level inversion for selected pins by setting the TXINV 
       and/or RXINV bits in the USART CR2 register */
    USARTx->CR2 |= USART_InvPin;
 8000e1c:	4319      	orrs	r1, r3
 8000e1e:	6041      	str	r1, [r0, #4]
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop

08000e24 <USART_SWAPPinCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the SWAP feature by setting the SWAP bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_SWAP;
 8000e24:	6843      	ldr	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000e26:	b919      	cbnz	r1, 8000e30 <USART_SWAPPinCmd+0xc>
    USARTx->CR2 |= USART_CR2_SWAP;
  }
  else
  {
    /* Disable the SWAP feature by clearing the SWAP bit in the CR2 register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_SWAP);
 8000e28:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000e2c:	6043      	str	r3, [r0, #4]
 8000e2e:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the SWAP feature by setting the SWAP bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_SWAP;
 8000e30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e34:	6043      	str	r3, [r0, #4]
 8000e36:	4770      	bx	lr

08000e38 <USART_ReceiverTimeOutCmd>:

  if (NewState != DISABLE)
  {
    /* Enable the receiver time out feature by setting the RTOEN bit in the CR2 
       register */
    USARTx->CR2 |= USART_CR2_RTOEN;
 8000e38:	6843      	ldr	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000e3a:	b919      	cbnz	r1, 8000e44 <USART_ReceiverTimeOutCmd+0xc>
  }
  else
  {
    /* Disable the receiver time out feature by clearing the RTOEN bit in the CR2 
       register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_RTOEN);
 8000e3c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000e40:	6043      	str	r3, [r0, #4]
 8000e42:	4770      	bx	lr

  if (NewState != DISABLE)
  {
    /* Enable the receiver time out feature by setting the RTOEN bit in the CR2 
       register */
    USARTx->CR2 |= USART_CR2_RTOEN;
 8000e44:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000e48:	6043      	str	r3, [r0, #4]
 8000e4a:	4770      	bx	lr

08000e4c <USART_SetReceiverTimeOut>:
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_TIMEOUT(USART_ReceiverTimeOut));

  /* Clear the receiver Time Out value by clearing the RTO[23:0] bits in the RTOR
     register  */
  USARTx->RTOR &= (uint32_t)~((uint32_t)USART_RTOR_RTO);
 8000e4c:	6943      	ldr	r3, [r0, #20]
 8000e4e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8000e52:	6143      	str	r3, [r0, #20]
  /* Set the receiver Time Out value by setting the RTO[23:0] bits in the RTOR
     register  */
  USARTx->RTOR |= USART_ReceiverTimeOut;
 8000e54:	6943      	ldr	r3, [r0, #20]
 8000e56:	4319      	orrs	r1, r3
 8000e58:	6141      	str	r1, [r0, #20]
 8000e5a:	4770      	bx	lr

08000e5c <USART_SetPrescaler>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Clear the USART prescaler */
  USARTx->GTPR &= USART_GTPR_GT;
 8000e5c:	8a03      	ldrh	r3, [r0, #16]
 8000e5e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8000e62:	8203      	strh	r3, [r0, #16]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 8000e64:	8a03      	ldrh	r3, [r0, #16]
 8000e66:	b29b      	uxth	r3, r3
 8000e68:	4319      	orrs	r1, r3
 8000e6a:	8201      	strh	r1, [r0, #16]
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop

08000e70 <USART_STOPModeCmd>:
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART in STOP mode by setting the UESM bit in the CR1
       register */
    USARTx->CR1 |= USART_CR1_UESM;
 8000e70:	6803      	ldr	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000e72:	b919      	cbnz	r1, 8000e7c <USART_STOPModeCmd+0xc>
  }
  else
  {
    /* Disable the selected USART in STOP mode by clearing the UE bit in the CR1
       register */
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UESM);
 8000e74:	f023 0302 	bic.w	r3, r3, #2
 8000e78:	6003      	str	r3, [r0, #0]
 8000e7a:	4770      	bx	lr
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART in STOP mode by setting the UESM bit in the CR1
       register */
    USARTx->CR1 |= USART_CR1_UESM;
 8000e7c:	f043 0302 	orr.w	r3, r3, #2
 8000e80:	6003      	str	r3, [r0, #0]
 8000e82:	4770      	bx	lr

08000e84 <USART_StopModeWakeUpSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_STOPMODE_WAKEUPSOURCE(USART_WakeUpSource));

  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_WUS);
 8000e84:	6883      	ldr	r3, [r0, #8]
 8000e86:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8000e8a:	6083      	str	r3, [r0, #8]
  USARTx->CR3 |= USART_WakeUpSource;
 8000e8c:	6883      	ldr	r3, [r0, #8]
 8000e8e:	4319      	orrs	r1, r3
 8000e90:	6081      	str	r1, [r0, #8]
 8000e92:	4770      	bx	lr

08000e94 <USART_AutoBaudRateCmd>:

  if (NewState != DISABLE)
  {
    /* Enable the auto baud rate feature by setting the ABREN bit in the CR2 
       register */
    USARTx->CR2 |= USART_CR2_ABREN;
 8000e94:	6843      	ldr	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000e96:	b919      	cbnz	r1, 8000ea0 <USART_AutoBaudRateCmd+0xc>
  }
  else
  {
    /* Disable the auto baud rate feature by clearing the ABREN bit in the CR2 
       register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_ABREN);
 8000e98:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000e9c:	6043      	str	r3, [r0, #4]
 8000e9e:	4770      	bx	lr

  if (NewState != DISABLE)
  {
    /* Enable the auto baud rate feature by setting the ABREN bit in the CR2 
       register */
    USARTx->CR2 |= USART_CR2_ABREN;
 8000ea0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000ea4:	6043      	str	r3, [r0, #4]
 8000ea6:	4770      	bx	lr

08000ea8 <USART_AutoBaudRateConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_AUTOBAUDRATE_MODE(USART_AutoBaudRate));

  USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_ABRMODE);
 8000ea8:	6843      	ldr	r3, [r0, #4]
 8000eaa:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8000eae:	6043      	str	r3, [r0, #4]
  USARTx->CR2 |= USART_AutoBaudRate;
 8000eb0:	6843      	ldr	r3, [r0, #4]
 8000eb2:	4319      	orrs	r1, r3
 8000eb4:	6041      	str	r1, [r0, #4]
 8000eb6:	4770      	bx	lr

08000eb8 <USART_SendData>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 

  /* Transmit Data */
  USARTx->TDR = (Data & (uint16_t)0x01FF);
 8000eb8:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8000ebc:	8501      	strh	r1, [r0, #40]	; 0x28
 8000ebe:	4770      	bx	lr

08000ec0 <USART_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Receive Data */
  return (uint16_t)(USARTx->RDR & (uint16_t)0x01FF);
 8000ec0:	8c80      	ldrh	r0, [r0, #36]	; 0x24
}
 8000ec2:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8000ec6:	4770      	bx	lr

08000ec8 <USART_SetAddress>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Clear the USART address */
  USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_ADD);
 8000ec8:	6843      	ldr	r3, [r0, #4]
 8000eca:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000ece:	6043      	str	r3, [r0, #4]
  /* Set the USART address node */
  USARTx->CR2 |=((uint32_t)USART_Address << (uint32_t)0x18);
 8000ed0:	6843      	ldr	r3, [r0, #4]
 8000ed2:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
 8000ed6:	6041      	str	r1, [r0, #4]
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <USART_MuteModeCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
  {
    /* Enable the USART mute mode by setting the MME bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_MME;
 8000edc:	6803      	ldr	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 8000ede:	b919      	cbnz	r1, 8000ee8 <USART_MuteModeCmd+0xc>
    USARTx->CR1 |= USART_CR1_MME;
  }
  else
  {
    /* Disable the USART mute mode by clearing the MME bit in the CR1 register */
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_MME);
 8000ee0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000ee4:	6003      	str	r3, [r0, #0]
 8000ee6:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
  {
    /* Enable the USART mute mode by setting the MME bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_MME;
 8000ee8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000eec:	6003      	str	r3, [r0, #0]
 8000eee:	4770      	bx	lr

08000ef0 <USART_MuteModeWakeUpConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_MUTEMODE_WAKEUP(USART_WakeUp));

  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_WAKE);
 8000ef0:	6803      	ldr	r3, [r0, #0]
 8000ef2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000ef6:	6003      	str	r3, [r0, #0]
  USARTx->CR1 |= USART_WakeUp;
 8000ef8:	6803      	ldr	r3, [r0, #0]
 8000efa:	4319      	orrs	r1, r3
 8000efc:	6001      	str	r1, [r0, #0]
 8000efe:	4770      	bx	lr

08000f00 <USART_AddressDetectionConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS_DETECTION(USART_AddressLength));

  USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_ADDM7);
 8000f00:	6843      	ldr	r3, [r0, #4]
 8000f02:	f023 0310 	bic.w	r3, r3, #16
 8000f06:	6043      	str	r3, [r0, #4]
  USARTx->CR2 |= USART_AddressLength;
 8000f08:	6843      	ldr	r3, [r0, #4]
 8000f0a:	4319      	orrs	r1, r3
 8000f0c:	6041      	str	r1, [r0, #4]
 8000f0e:	4770      	bx	lr

08000f10 <USART_LINBreakDetectLengthConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));

  USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_LBDL);
 8000f10:	6843      	ldr	r3, [r0, #4]
 8000f12:	f023 0320 	bic.w	r3, r3, #32
 8000f16:	6043      	str	r3, [r0, #4]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 8000f18:	6843      	ldr	r3, [r0, #4]
 8000f1a:	4319      	orrs	r1, r3
 8000f1c:	6041      	str	r1, [r0, #4]
 8000f1e:	4770      	bx	lr

08000f20 <USART_LINCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 8000f20:	6843      	ldr	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000f22:	b919      	cbnz	r1, 8000f2c <USART_LINCmd+0xc>
    USARTx->CR2 |= USART_CR2_LINEN;
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_LINEN);
 8000f24:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000f28:	6043      	str	r3, [r0, #4]
 8000f2a:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 8000f2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f30:	6043      	str	r3, [r0, #4]
 8000f32:	4770      	bx	lr

08000f34 <USART_HalfDuplexCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 8000f34:	6883      	ldr	r3, [r0, #8]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000f36:	b919      	cbnz	r1, 8000f40 <USART_HalfDuplexCmd+0xc>
    USARTx->CR3 |= USART_CR3_HDSEL;
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_HDSEL);
 8000f38:	f023 0308 	bic.w	r3, r3, #8
 8000f3c:	6083      	str	r3, [r0, #8]
 8000f3e:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 8000f40:	f043 0308 	orr.w	r3, r3, #8
 8000f44:	6083      	str	r3, [r0, #8]
 8000f46:	4770      	bx	lr

08000f48 <USART_SetGuardTime>:
{    
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));

  /* Clear the USART Guard time */
  USARTx->GTPR &= USART_GTPR_PSC;
 8000f48:	8a03      	ldrh	r3, [r0, #16]
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	8203      	strh	r3, [r0, #16]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 8000f4e:	8a03      	ldrh	r3, [r0, #16]
 8000f50:	b29b      	uxth	r3, r3
 8000f52:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8000f56:	8201      	strh	r1, [r0, #16]
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <USART_SmartCardCmd>:
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 8000f5c:	6883      	ldr	r3, [r0, #8]
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000f5e:	b919      	cbnz	r1, 8000f68 <USART_SmartCardCmd+0xc>
    USARTx->CR3 |= USART_CR3_SCEN;
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_SCEN);
 8000f60:	f023 0320 	bic.w	r3, r3, #32
 8000f64:	6083      	str	r3, [r0, #8]
 8000f66:	4770      	bx	lr
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 8000f68:	f043 0320 	orr.w	r3, r3, #32
 8000f6c:	6083      	str	r3, [r0, #8]
 8000f6e:	4770      	bx	lr

08000f70 <USART_SmartCardNACKCmd>:
  assert_param(IS_USART_123_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 8000f70:	6883      	ldr	r3, [r0, #8]
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000f72:	b919      	cbnz	r1, 8000f7c <USART_SmartCardNACKCmd+0xc>
    USARTx->CR3 |= USART_CR3_NACK;
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_NACK);
 8000f74:	f023 0310 	bic.w	r3, r3, #16
 8000f78:	6083      	str	r3, [r0, #8]
 8000f7a:	4770      	bx	lr
  assert_param(IS_USART_123_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 8000f7c:	f043 0310 	orr.w	r3, r3, #16
 8000f80:	6083      	str	r3, [r0, #8]
 8000f82:	4770      	bx	lr

08000f84 <USART_SetAutoRetryCount>:
{    
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_USART_AUTO_RETRY_COUNTER(USART_AutoCount));
  /* Clear the USART auto retry count */
  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_SCARCNT);
 8000f84:	6883      	ldr	r3, [r0, #8]
 8000f86:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 8000f8a:	6083      	str	r3, [r0, #8]
  /* Set the USART auto retry count*/
  USARTx->CR3 |= (uint32_t)((uint32_t)USART_AutoCount << 0x11);
 8000f8c:	6883      	ldr	r3, [r0, #8]
 8000f8e:	ea43 4141 	orr.w	r1, r3, r1, lsl #17
 8000f92:	6081      	str	r1, [r0, #8]
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <USART_SetBlockLength>:
{    
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));

  /* Clear the Smart card block length */
  USARTx->RTOR &= (uint32_t)~((uint32_t)USART_RTOR_BLEN);
 8000f98:	6943      	ldr	r3, [r0, #20]
 8000f9a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000f9e:	6143      	str	r3, [r0, #20]
  /* Set the Smart Card block length */
  USARTx->RTOR |= (uint32_t)((uint32_t)USART_BlockLength << 0x18);
 8000fa0:	6943      	ldr	r3, [r0, #20]
 8000fa2:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
 8000fa6:	6141      	str	r1, [r0, #20]
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop

08000fac <USART_IrDAConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));

  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_IRLP);
 8000fac:	6883      	ldr	r3, [r0, #8]
 8000fae:	f023 0304 	bic.w	r3, r3, #4
 8000fb2:	6083      	str	r3, [r0, #8]
  USARTx->CR3 |= USART_IrDAMode;
 8000fb4:	6883      	ldr	r3, [r0, #8]
 8000fb6:	4319      	orrs	r1, r3
 8000fb8:	6081      	str	r1, [r0, #8]
 8000fba:	4770      	bx	lr

08000fbc <USART_IrDACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 8000fbc:	6883      	ldr	r3, [r0, #8]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000fbe:	b919      	cbnz	r1, 8000fc8 <USART_IrDACmd+0xc>
    USARTx->CR3 |= USART_CR3_IREN;
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_IREN);
 8000fc0:	f023 0302 	bic.w	r3, r3, #2
 8000fc4:	6083      	str	r3, [r0, #8]
 8000fc6:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 8000fc8:	f043 0302 	orr.w	r3, r3, #2
 8000fcc:	6083      	str	r3, [r0, #8]
 8000fce:	4770      	bx	lr

08000fd0 <USART_DECmd>:
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the DE functionality by setting the DEM bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_DEM;
 8000fd0:	6883      	ldr	r3, [r0, #8]
void USART_DECmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000fd2:	b919      	cbnz	r1, 8000fdc <USART_DECmd+0xc>
    USARTx->CR3 |= USART_CR3_DEM;
  }
  else
  {
    /* Disable the DE functionality by clearing the DEM bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DEM);
 8000fd4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000fd8:	6083      	str	r3, [r0, #8]
 8000fda:	4770      	bx	lr
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the DE functionality by setting the DEM bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_DEM;
 8000fdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fe0:	6083      	str	r3, [r0, #8]
 8000fe2:	4770      	bx	lr

08000fe4 <USART_DEPolarityConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DE_POLARITY(USART_DEPolarity));

  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DEP);
 8000fe4:	6883      	ldr	r3, [r0, #8]
 8000fe6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000fea:	6083      	str	r3, [r0, #8]
  USARTx->CR3 |= USART_DEPolarity;
 8000fec:	6883      	ldr	r3, [r0, #8]
 8000fee:	4319      	orrs	r1, r3
 8000ff0:	6081      	str	r1, [r0, #8]
 8000ff2:	4770      	bx	lr

08000ff4 <USART_SetDEAssertionTime>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DE_ASSERTION_DEASSERTION_TIME(USART_DEAssertionTime)); 

  /* Clear the DE assertion time */
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_DEAT);
 8000ff4:	6803      	ldr	r3, [r0, #0]
 8000ff6:	f023 7378 	bic.w	r3, r3, #65011712	; 0x3e00000
 8000ffa:	6003      	str	r3, [r0, #0]
  /* Set the new value for the DE assertion time */
  USARTx->CR1 |=((uint32_t)USART_DEAssertionTime << (uint32_t)0x15);
 8000ffc:	6803      	ldr	r3, [r0, #0]
 8000ffe:	ea43 5141 	orr.w	r1, r3, r1, lsl #21
 8001002:	6001      	str	r1, [r0, #0]
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <USART_SetDEDeassertionTime>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DE_ASSERTION_DEASSERTION_TIME(USART_DEDeassertionTime)); 

  /* Clear the DE deassertion time */
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_DEDT);
 8001008:	6803      	ldr	r3, [r0, #0]
 800100a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800100e:	6003      	str	r3, [r0, #0]
  /* Set the new value for the DE deassertion time */
  USARTx->CR1 |=((uint32_t)USART_DEDeassertionTime << (uint32_t)0x10);
 8001010:	6803      	ldr	r3, [r0, #0]
 8001012:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8001016:	6001      	str	r1, [r0, #0]
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop

0800101c <USART_DMACmd>:

  if (NewState != DISABLE)
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 800101c:	6883      	ldr	r3, [r0, #8]
  /* Check the parameters */
  assert_param(IS_USART_1234_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 800101e:	b91a      	cbnz	r2, 8001028 <USART_DMACmd+0xc>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint32_t)~USART_DMAReq;
 8001020:	ea23 0101 	bic.w	r1, r3, r1
 8001024:	6081      	str	r1, [r0, #8]
 8001026:	4770      	bx	lr

  if (NewState != DISABLE)
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8001028:	4319      	orrs	r1, r3
 800102a:	6081      	str	r1, [r0, #8]
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <USART_DMAReceptionErrorConfig>:
  /* Check the parameters */
  assert_param(IS_USART_1234_PERIPH(USARTx));
  assert_param(IS_USART_DMAONERROR(USART_DMAOnError)); 
  
  /* Clear the DMA Reception error detection bit */
  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DDRE);
 8001030:	6883      	ldr	r3, [r0, #8]
 8001032:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001036:	6083      	str	r3, [r0, #8]
  /* Set the new value for the DMA Reception error detection bit */
  USARTx->CR3 |= USART_DMAOnError;
 8001038:	6883      	ldr	r3, [r0, #8]
 800103a:	4319      	orrs	r1, r3
 800103c:	6081      	str	r1, [r0, #8]
 800103e:	4770      	bx	lr

08001040 <USART_ITConfig>:

  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8001040:	b2cb      	uxtb	r3, r1
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  usartxbase = (uint32_t)USARTx;

  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8001042:	f3c1 2107 	ubfx	r1, r1, #8, #8
  * @param  NewState: new state of the specified USARTx interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint32_t USART_IT, FunctionalState NewState)
{
 8001046:	b410      	push	{r4}

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);

  if (usartreg == 0x02) /* The IT is in CR2 register */
 8001048:	2902      	cmp	r1, #2
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
 800104a:	f04f 0401 	mov.w	r4, #1
 800104e:	fa04 f303 	lsl.w	r3, r4, r3

  if (usartreg == 0x02) /* The IT is in CR2 register */
 8001052:	d00f      	beq.n	8001074 <USART_ITConfig+0x34>
  {
    usartxbase += 0x04;
  }
  else if (usartreg == 0x03) /* The IT is in CR3 register */
 8001054:	2903      	cmp	r1, #3
  {
    usartxbase += 0x08;
 8001056:	bf08      	it	eq
 8001058:	3008      	addeq	r0, #8
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 800105a:	6804      	ldr	r4, [r0, #0]
    usartxbase += 0x08;
  }
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
 800105c:	b92a      	cbnz	r2, 800106a <USART_ITConfig+0x2a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 800105e:	ea24 0303 	bic.w	r3, r4, r3
 8001062:	6003      	str	r3, [r0, #0]
  }
}
 8001064:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001068:	4770      	bx	lr
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 800106a:	4323      	orrs	r3, r4
 800106c:	6003      	str	r3, [r0, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 800106e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001072:	4770      	bx	lr
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);

  if (usartreg == 0x02) /* The IT is in CR2 register */
  {
    usartxbase += 0x04;
 8001074:	3004      	adds	r0, #4
 8001076:	e7f0      	b.n	800105a <USART_ITConfig+0x1a>

08001078 <USART_RequestCmd>:

  if (NewState != DISABLE)
  {
    /* Enable the USART ReQuest by setting the dedicated request bit in the RQR
       register.*/
    USARTx->RQR |= USART_Request;
 8001078:	8b03      	ldrh	r3, [r0, #24]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_REQUEST(USART_Request));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 800107a:	b922      	cbnz	r2, 8001086 <USART_RequestCmd+0xe>
  }
  else
  {
    /* Disable the USART ReQuest by clearing the dedicated request bit in the RQR
       register.*/
    USARTx->RQR &= (uint32_t)~USART_Request;
 800107c:	b29b      	uxth	r3, r3
 800107e:	ea23 0101 	bic.w	r1, r3, r1
 8001082:	8301      	strh	r1, [r0, #24]
 8001084:	4770      	bx	lr

  if (NewState != DISABLE)
  {
    /* Enable the USART ReQuest by setting the dedicated request bit in the RQR
       register.*/
    USARTx->RQR |= USART_Request;
 8001086:	4319      	orrs	r1, r3
 8001088:	b289      	uxth	r1, r1
 800108a:	8301      	strh	r1, [r0, #24]
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop

08001090 <USART_OverrunDetectionConfig>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_OVRDETECTION(USART_OVRDetection));
  
  /* Clear the OVR detection bit */
  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_OVRDIS);
 8001090:	6883      	ldr	r3, [r0, #8]
 8001092:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001096:	6083      	str	r3, [r0, #8]
  /* Set the new value for the OVR detection bit */
  USARTx->CR3 |= USART_OVRDetection;
 8001098:	6883      	ldr	r3, [r0, #8]
 800109a:	4319      	orrs	r1, r3
 800109c:	6081      	str	r1, [r0, #8]
 800109e:	4770      	bx	lr

080010a0 <USART_GetFlagStatus>:
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  
  if ((USARTx->ISR & USART_FLAG) != (uint16_t)RESET)
 80010a0:	69c3      	ldr	r3, [r0, #28]
 80010a2:	4219      	tst	r1, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 80010a4:	bf0c      	ite	eq
 80010a6:	2000      	moveq	r0, #0
 80010a8:	2001      	movne	r0, #1
 80010aa:	4770      	bx	lr

080010ac <USART_ClearFlag>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CLEAR_FLAG(USART_FLAG));
     
  USARTx->ICR = USART_FLAG;
 80010ac:	6201      	str	r1, [r0, #32]
 80010ae:	4770      	bx	lr

080010b0 <USART_GetITStatus>:
  *         @arg USART_IT_FE:  Framing Error interrupt.
  *         @arg USART_IT_PE:  Parity Error interrupt.
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint32_t USART_IT)
{
 80010b0:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_GET_IT(USART_IT)); 
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 80010b2:	f3c1 2307 	ubfx	r3, r1, #8, #8
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
 80010b6:	2401      	movs	r4, #1
  assert_param(IS_USART_GET_IT(USART_IT)); 
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 80010b8:	b2ca      	uxtb	r2, r1
  itmask = (uint32_t)0x01 << itmask;
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 80010ba:	42a3      	cmp	r3, r4
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
 80010bc:	fa04 f202 	lsl.w	r2, r4, r2
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 80010c0:	d015      	beq.n	80010ee <USART_GetITStatus+0x3e>
  {
    itmask &= USARTx->CR1;
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 80010c2:	2b02      	cmp	r3, #2
  {
    itmask &= USARTx->CR2;
 80010c4:	bf0c      	ite	eq
 80010c6:	6843      	ldreq	r3, [r0, #4]
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 80010c8:	6883      	ldrne	r3, [r0, #8]
 80010ca:	4013      	ands	r3, r2
  }
  
  bitpos = USART_IT >> 0x10;
  bitpos = (uint32_t)0x01 << bitpos;
  bitpos &= USARTx->ISR;
 80010cc:	69c2      	ldr	r2, [r0, #28]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 80010ce:	b153      	cbz	r3, 80010e6 <USART_GetITStatus+0x36>
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
  }
  
  bitpos = USART_IT >> 0x10;
 80010d0:	0c09      	lsrs	r1, r1, #16
  bitpos = (uint32_t)0x01 << bitpos;
 80010d2:	2301      	movs	r3, #1
 80010d4:	fa03 f101 	lsl.w	r1, r3, r1
  bitpos &= USARTx->ISR;
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 80010d8:	4211      	tst	r1, r2
  {
    bitstatus = SET;
 80010da:	bf0c      	ite	eq
 80010dc:	2000      	moveq	r0, #0
 80010de:	2001      	movne	r0, #1
  {
    bitstatus = RESET;
  }
  
  return bitstatus;  
}
 80010e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80010e4:	4770      	bx	lr
  {
    bitstatus = SET;
  }
  else
  {
    bitstatus = RESET;
 80010e6:	4618      	mov	r0, r3
  }
  
  return bitstatus;  
}
 80010e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80010ec:	4770      	bx	lr
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
  {
    itmask &= USARTx->CR1;
 80010ee:	6803      	ldr	r3, [r0, #0]
 80010f0:	4013      	ands	r3, r2
 80010f2:	e7eb      	b.n	80010cc <USART_GetITStatus+0x1c>

080010f4 <USART_ClearITPendingBit>:
  uint32_t bitpos = 0, itmask = 0;
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CLEAR_IT(USART_IT)); 
  
  bitpos = USART_IT >> 0x10;
 80010f4:	0c09      	lsrs	r1, r1, #16
  itmask = ((uint32_t)0x01 << (uint32_t)bitpos);
 80010f6:	2301      	movs	r3, #1
 80010f8:	fa03 f101 	lsl.w	r1, r3, r1
  USARTx->ICR = (uint32_t)itmask;
 80010fc:	6201      	str	r1, [r0, #32]
 80010fe:	4770      	bx	lr

08001100 <illegal_state>:
	
}
*/

State illegal_state(void)
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
	const char* state_desc = "ILLEGAL";
 8001106:	4b01      	ldr	r3, [pc, #4]	; (800110c <illegal_state+0xc>)
 8001108:	607b      	str	r3, [r7, #4]
	while(1);
 800110a:	e7fe      	b.n	800110a <illegal_state+0xa>
 800110c:	08001484 	.word	0x08001484

08001110 <init_state>:
/**
 * @brief Configure general purpose IOs. Requires the use of TMR2,
 * 	       call the timer configuration before GPIO config.
 */
State init_state(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b08a      	sub	sp, #40	; 0x28
 8001114:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef PortA;
	GPIO_InitTypeDef PortE;
	
	/* GPIOA,E Periph clock enable */
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA | RCC_AHBPeriph_GPIOE, ENABLE);
 8001116:	f44f 1008 	mov.w	r0, #2228224	; 0x220000
 800111a:	2101      	movs	r1, #1
 800111c:	f7ff fcbe 	bl	8000a9c <RCC_AHBPeriphClockCmd>
	
	/* configure the output leds */
	PortE.GPIO_Pin = DISCOVERY_LD3 | DISCOVERY_LD4;
 8001120:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001124:	61bb      	str	r3, [r7, #24]
	PortE.GPIO_Speed = GPIO_Speed_50MHz;
 8001126:	2303      	movs	r3, #3
 8001128:	777b      	strb	r3, [r7, #29]
	PortE.GPIO_Mode = GPIO_Mode_OUT;
 800112a:	2301      	movs	r3, #1
 800112c:	773b      	strb	r3, [r7, #28]
	PortE.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800112e:	2300      	movs	r3, #0
 8001130:	77fb      	strb	r3, [r7, #31]
	/* Use Push-Pull mode, actively drive high and low */ 
	PortE.GPIO_OType = GPIO_OType_PP;
 8001132:	2300      	movs	r3, #0
 8001134:	77bb      	strb	r3, [r7, #30]
	
	GPIO_Init(GPIOE, &PortE);
 8001136:	f107 0318 	add.w	r3, r7, #24
 800113a:	4830      	ldr	r0, [pc, #192]	; (80011fc <init_state+0xec>)
 800113c:	4619      	mov	r1, r3
 800113e:	f7ff f8ab 	bl	8000298 <GPIO_Init>
	
	/* Enable the USART2 Periph Clock */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 8001142:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001146:	2101      	movs	r1, #1
 8001148:	f7ff fcc0 	bl	8000acc <RCC_APB1PeriphClockCmd>
	
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_7);
 800114c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001150:	2102      	movs	r1, #2
 8001152:	2207      	movs	r2, #7
 8001154:	f7ff f930 	bl	80003b8 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_7);
 8001158:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800115c:	2103      	movs	r1, #3
 800115e:	2207      	movs	r2, #7
 8001160:	f7ff f92a 	bl	80003b8 <GPIO_PinAFConfig>
	
	/* Configure USART2 pins RX/TX pins */
	/* PA2 Tx, PA3 Rx */
	PortA.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
 8001164:	230c      	movs	r3, #12
 8001166:	623b      	str	r3, [r7, #32]
	PortA.GPIO_Speed = GPIO_Speed_50MHz;
 8001168:	2303      	movs	r3, #3
 800116a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	PortA.GPIO_Mode = GPIO_Mode_AF;
 800116e:	2302      	movs	r3, #2
 8001170:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	PortA.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001174:	2300      	movs	r3, #0
 8001176:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	PortA.GPIO_OType = GPIO_OType_PP;
 800117a:	2300      	movs	r3, #0
 800117c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	GPIO_Init(GPIOA, &PortA);
 8001180:	f107 0320 	add.w	r3, r7, #32
 8001184:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001188:	4619      	mov	r1, r3
 800118a:	f7ff f885 	bl	8000298 <GPIO_Init>
	
	USART_InitTypeDef USART2_Config;
	/* Configure USART2 */
	USART2_Config.USART_BaudRate = 9600;
 800118e:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8001192:	603b      	str	r3, [r7, #0]
	USART2_Config.USART_WordLength = USART_WordLength_8b;
 8001194:	2300      	movs	r3, #0
 8001196:	607b      	str	r3, [r7, #4]
	USART2_Config.USART_StopBits = USART_StopBits_1;
 8001198:	2300      	movs	r3, #0
 800119a:	60bb      	str	r3, [r7, #8]
	USART2_Config.USART_Parity = USART_Parity_No;
 800119c:	2300      	movs	r3, #0
 800119e:	60fb      	str	r3, [r7, #12]
	USART2_Config.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 80011a0:	2300      	movs	r3, #0
 80011a2:	617b      	str	r3, [r7, #20]
	USART2_Config.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 80011a4:	230c      	movs	r3, #12
 80011a6:	613b      	str	r3, [r7, #16]
	
	USART_Init(USART2, &USART2_Config);
 80011a8:	463b      	mov	r3, r7
 80011aa:	4815      	ldr	r0, [pc, #84]	; (8001200 <init_state+0xf0>)
 80011ac:	4619      	mov	r1, r3
 80011ae:	f7ff fd77 	bl	8000ca0 <USART_Init>
	
	/* Enable USART2 */
	USART_Cmd(USART2, ENABLE);
 80011b2:	4813      	ldr	r0, [pc, #76]	; (8001200 <init_state+0xf0>)
 80011b4:	2101      	movs	r1, #1
 80011b6:	f7ff fdef 	bl	8000d98 <USART_Cmd>
	
	GPIO_WriteBit(GPIOE, DISCOVERY_LD3, Bit_SET);
 80011ba:	4810      	ldr	r0, [pc, #64]	; (80011fc <init_state+0xec>)
 80011bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011c0:	2201      	movs	r2, #1
 80011c2:	f7ff f8f1 	bl	80003a8 <GPIO_WriteBit>
	GPIO_WriteBit(GPIOE, DISCOVERY_LD4, Bit_SET);
 80011c6:	480d      	ldr	r0, [pc, #52]	; (80011fc <init_state+0xec>)
 80011c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011cc:	2201      	movs	r2, #1
 80011ce:	f7ff f8eb 	bl	80003a8 <GPIO_WriteBit>
	
	/* Send "OK" on the serial port to show it works */
	USART_SendData(USART2, 'O');
 80011d2:	480b      	ldr	r0, [pc, #44]	; (8001200 <init_state+0xf0>)
 80011d4:	214f      	movs	r1, #79	; 0x4f
 80011d6:	f7ff fe6f 	bl	8000eb8 <USART_SendData>
	while (USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET);
 80011da:	bf00      	nop
 80011dc:	4808      	ldr	r0, [pc, #32]	; (8001200 <init_state+0xf0>)
 80011de:	2180      	movs	r1, #128	; 0x80
 80011e0:	f7ff ff5e 	bl	80010a0 <USART_GetFlagStatus>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d0f8      	beq.n	80011dc <init_state+0xcc>
	USART_SendData(USART2, 'K');
 80011ea:	4805      	ldr	r0, [pc, #20]	; (8001200 <init_state+0xf0>)
 80011ec:	214b      	movs	r1, #75	; 0x4b
 80011ee:	f7ff fe63 	bl	8000eb8 <USART_SendData>
	
	
	
	return RDY_STATE;
 80011f2:	2301      	movs	r3, #1
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3728      	adds	r7, #40	; 0x28
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	48001000 	.word	0x48001000
 8001200:	40004400 	.word	0x40004400

08001204 <ready_state>:

State ready_state(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
	while(1) {
		/* Check if we got a serial message */
		if (USART_GetFlagStatus(USART2, USART_FLAG_RXNE)) {
 8001208:	4808      	ldr	r0, [pc, #32]	; (800122c <ready_state+0x28>)
 800120a:	2120      	movs	r1, #32
 800120c:	f7ff ff48 	bl	80010a0 <USART_GetFlagStatus>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d008      	beq.n	8001228 <ready_state+0x24>
			USART_SendData(USART2, USART_ReceiveData(USART2));
 8001216:	4805      	ldr	r0, [pc, #20]	; (800122c <ready_state+0x28>)
 8001218:	f7ff fe52 	bl	8000ec0 <USART_ReceiveData>
 800121c:	4603      	mov	r3, r0
 800121e:	4803      	ldr	r0, [pc, #12]	; (800122c <ready_state+0x28>)
 8001220:	4619      	mov	r1, r3
 8001222:	f7ff fe49 	bl	8000eb8 <USART_SendData>
		}
	}
 8001226:	e7ef      	b.n	8001208 <ready_state+0x4>
 8001228:	e7ee      	b.n	8001208 <ready_state+0x4>
 800122a:	bf00      	nop
 800122c:	40004400 	.word	0x40004400

08001230 <main>:
}

int main(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b086      	sub	sp, #24
 8001234:	af00      	add	r7, sp, #0
	//Configure our I/O
	
	//Spin up the state machine
	State_Machine s;
	s.state_table[ILLEGAL_STATE] = illegal_state;
 8001236:	4b0a      	ldr	r3, [pc, #40]	; (8001260 <main+0x30>)
 8001238:	607b      	str	r3, [r7, #4]
	s.state_table[INIT_STATE] = init_state;
 800123a:	4b0a      	ldr	r3, [pc, #40]	; (8001264 <main+0x34>)
 800123c:	60fb      	str	r3, [r7, #12]
	s.state_table[RDY_STATE] = ready_state;
 800123e:	4b0a      	ldr	r3, [pc, #40]	; (8001268 <main+0x38>)
 8001240:	60bb      	str	r3, [r7, #8]
	s.state_table[NUM_STATES] = illegal_state;
 8001242:	4b07      	ldr	r3, [pc, #28]	; (8001260 <main+0x30>)
 8001244:	61bb      	str	r3, [r7, #24]
	s.current_state = INIT_STATE;
 8001246:	2302      	movs	r3, #2
 8001248:	703b      	strb	r3, [r7, #0]
	while(1)
	{
		s.current_state = s.state_table[s.current_state]();
 800124a:	783b      	ldrb	r3, [r7, #0]
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	f107 0218 	add.w	r2, r7, #24
 8001252:	4413      	add	r3, r2
 8001254:	f853 3c14 	ldr.w	r3, [r3, #-20]
 8001258:	4798      	blx	r3
 800125a:	4603      	mov	r3, r0
 800125c:	703b      	strb	r3, [r7, #0]
	}
 800125e:	e7f4      	b.n	800124a <main+0x1a>
 8001260:	08001101 	.word	0x08001101
 8001264:	08001111 	.word	0x08001111
 8001268:	08001205 	.word	0x08001205

0800126c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001270:	4b1e      	ldr	r3, [pc, #120]	; (80012ec <SystemInit+0x80>)
 8001272:	4a1e      	ldr	r2, [pc, #120]	; (80012ec <SystemInit+0x80>)
 8001274:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8001278:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800127c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001280:	4b1b      	ldr	r3, [pc, #108]	; (80012f0 <SystemInit+0x84>)
 8001282:	4a1b      	ldr	r2, [pc, #108]	; (80012f0 <SystemInit+0x84>)
 8001284:	6812      	ldr	r2, [r2, #0]
 8001286:	f042 0201 	orr.w	r2, r2, #1
 800128a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 800128c:	4a18      	ldr	r2, [pc, #96]	; (80012f0 <SystemInit+0x84>)
 800128e:	4b18      	ldr	r3, [pc, #96]	; (80012f0 <SystemInit+0x84>)
 8001290:	6859      	ldr	r1, [r3, #4]
 8001292:	4b18      	ldr	r3, [pc, #96]	; (80012f4 <SystemInit+0x88>)
 8001294:	400b      	ands	r3, r1
 8001296:	6053      	str	r3, [r2, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001298:	4a15      	ldr	r2, [pc, #84]	; (80012f0 <SystemInit+0x84>)
 800129a:	4b15      	ldr	r3, [pc, #84]	; (80012f0 <SystemInit+0x84>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80012a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012a6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80012a8:	4b11      	ldr	r3, [pc, #68]	; (80012f0 <SystemInit+0x84>)
 80012aa:	4a11      	ldr	r2, [pc, #68]	; (80012f0 <SystemInit+0x84>)
 80012ac:	6812      	ldr	r2, [r2, #0]
 80012ae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80012b2:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80012b4:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <SystemInit+0x84>)
 80012b6:	4a0e      	ldr	r2, [pc, #56]	; (80012f0 <SystemInit+0x84>)
 80012b8:	6852      	ldr	r2, [r2, #4]
 80012ba:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80012be:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 80012c0:	4b0b      	ldr	r3, [pc, #44]	; (80012f0 <SystemInit+0x84>)
 80012c2:	4a0b      	ldr	r2, [pc, #44]	; (80012f0 <SystemInit+0x84>)
 80012c4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80012c6:	f022 020f 	bic.w	r2, r2, #15
 80012ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 80012cc:	4a08      	ldr	r2, [pc, #32]	; (80012f0 <SystemInit+0x84>)
 80012ce:	4b08      	ldr	r3, [pc, #32]	; (80012f0 <SystemInit+0x84>)
 80012d0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80012d2:	4b09      	ldr	r3, [pc, #36]	; (80012f8 <SystemInit+0x8c>)
 80012d4:	400b      	ands	r3, r1
 80012d6:	6313      	str	r3, [r2, #48]	; 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80012d8:	4b05      	ldr	r3, [pc, #20]	; (80012f0 <SystemInit+0x84>)
 80012da:	2200      	movs	r2, #0
 80012dc:	609a      	str	r2, [r3, #8]

  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80012de:	f000 f80d 	bl	80012fc <SetSysClock>
  
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80012e2:	4b02      	ldr	r3, [pc, #8]	; (80012ec <SystemInit+0x80>)
 80012e4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012e8:	609a      	str	r2, [r3, #8]
#endif  
}
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	e000ed00 	.word	0xe000ed00
 80012f0:	40021000 	.word	0x40021000
 80012f4:	f87fc00c 	.word	0xf87fc00c
 80012f8:	ff00fccc 	.word	0xff00fccc

080012fc <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8001302:	2300      	movs	r3, #0
 8001304:	607b      	str	r3, [r7, #4]
 8001306:	2300      	movs	r3, #0
 8001308:	603b      	str	r3, [r7, #0]
 #if defined (PLL_SOURCE_HSE)
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 #elif defined (PLL_SOURCE_HSE_BYPASS)
  /* HSE oscillator bypassed with external clock */    
  RCC->CR |= (uint32_t)(RCC_CR_HSEON | RCC_CR_HSEBYP);
 800130a:	4b32      	ldr	r3, [pc, #200]	; (80013d4 <SetSysClock+0xd8>)
 800130c:	4a31      	ldr	r2, [pc, #196]	; (80013d4 <SetSysClock+0xd8>)
 800130e:	6812      	ldr	r2, [r2, #0]
 8001310:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
 8001314:	601a      	str	r2, [r3, #0]
 #endif /* PLL_SOURCE_HSE */
   
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001316:	4b2f      	ldr	r3, [pc, #188]	; (80013d4 <SetSysClock+0xd8>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800131e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	3301      	adds	r3, #1
 8001324:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d103      	bne.n	8001334 <SetSysClock+0x38>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001332:	d1f0      	bne.n	8001316 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001334:	4b27      	ldr	r3, [pc, #156]	; (80013d4 <SetSysClock+0xd8>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d002      	beq.n	8001346 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001340:	2301      	movs	r3, #1
 8001342:	603b      	str	r3, [r7, #0]
 8001344:	e001      	b.n	800134a <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8001346:	2300      	movs	r3, #0
 8001348:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	2b01      	cmp	r3, #1
 800134e:	d13c      	bne.n	80013ca <SetSysClock+0xce>
  {
    /* Enable Prefetch Buffer and set Flash Latency */
    FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY_1;
 8001350:	4b21      	ldr	r3, [pc, #132]	; (80013d8 <SetSysClock+0xdc>)
 8001352:	2212      	movs	r2, #18
 8001354:	601a      	str	r2, [r3, #0]
 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8001356:	4b1f      	ldr	r3, [pc, #124]	; (80013d4 <SetSysClock+0xd8>)
 8001358:	4a1e      	ldr	r2, [pc, #120]	; (80013d4 <SetSysClock+0xd8>)
 800135a:	6852      	ldr	r2, [r2, #4]
 800135c:	605a      	str	r2, [r3, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 800135e:	4b1d      	ldr	r3, [pc, #116]	; (80013d4 <SetSysClock+0xd8>)
 8001360:	4a1c      	ldr	r2, [pc, #112]	; (80013d4 <SetSysClock+0xd8>)
 8001362:	6852      	ldr	r2, [r2, #4]
 8001364:	605a      	str	r2, [r3, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8001366:	4b1b      	ldr	r3, [pc, #108]	; (80013d4 <SetSysClock+0xd8>)
 8001368:	4a1a      	ldr	r2, [pc, #104]	; (80013d4 <SetSysClock+0xd8>)
 800136a:	6852      	ldr	r2, [r2, #4]
 800136c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001370:	605a      	str	r2, [r3, #4]
    
   
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8001372:	4b18      	ldr	r3, [pc, #96]	; (80013d4 <SetSysClock+0xd8>)
 8001374:	4a17      	ldr	r2, [pc, #92]	; (80013d4 <SetSysClock+0xd8>)
 8001376:	6852      	ldr	r2, [r2, #4]
 8001378:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 800137c:	605a      	str	r2, [r3, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_PREDIV1 | RCC_CFGR_PLLMULL9);
 800137e:	4b15      	ldr	r3, [pc, #84]	; (80013d4 <SetSysClock+0xd8>)
 8001380:	4a14      	ldr	r2, [pc, #80]	; (80013d4 <SetSysClock+0xd8>)
 8001382:	6852      	ldr	r2, [r2, #4]
 8001384:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
 8001388:	605a      	str	r2, [r3, #4]
    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 800138a:	4b12      	ldr	r3, [pc, #72]	; (80013d4 <SetSysClock+0xd8>)
 800138c:	4a11      	ldr	r2, [pc, #68]	; (80013d4 <SetSysClock+0xd8>)
 800138e:	6812      	ldr	r2, [r2, #0]
 8001390:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001394:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001396:	bf00      	nop
 8001398:	4b0e      	ldr	r3, [pc, #56]	; (80013d4 <SetSysClock+0xd8>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d0f9      	beq.n	8001398 <SetSysClock+0x9c>
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80013a4:	4b0b      	ldr	r3, [pc, #44]	; (80013d4 <SetSysClock+0xd8>)
 80013a6:	4a0b      	ldr	r2, [pc, #44]	; (80013d4 <SetSysClock+0xd8>)
 80013a8:	6852      	ldr	r2, [r2, #4]
 80013aa:	f022 0203 	bic.w	r2, r2, #3
 80013ae:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 80013b0:	4b08      	ldr	r3, [pc, #32]	; (80013d4 <SetSysClock+0xd8>)
 80013b2:	4a08      	ldr	r2, [pc, #32]	; (80013d4 <SetSysClock+0xd8>)
 80013b4:	6852      	ldr	r2, [r2, #4]
 80013b6:	f042 0202 	orr.w	r2, r2, #2
 80013ba:	605a      	str	r2, [r3, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 80013bc:	bf00      	nop
 80013be:	4b05      	ldr	r3, [pc, #20]	; (80013d4 <SetSysClock+0xd8>)
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f003 030c 	and.w	r3, r3, #12
 80013c6:	2b08      	cmp	r3, #8
 80013c8:	d1f9      	bne.n	80013be <SetSysClock+0xc2>
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  } 
#endif /* PLL_SOURCE_HSI */  
}
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	40021000 	.word	0x40021000
 80013d8:	40022000 	.word	0x40022000

080013dc <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80013dc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80013de:	f000 b804 	b.w	80013ea <LoopCopyDataInit>

080013e2 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80013e2:	4b0e      	ldr	r3, [pc, #56]	; (800141c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80013e4:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80013e6:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80013e8:	3104      	adds	r1, #4

080013ea <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80013ea:	480d      	ldr	r0, [pc, #52]	; (8001420 <LoopForever+0xa>)
	ldr	r3, =_edata
 80013ec:	4b0d      	ldr	r3, [pc, #52]	; (8001424 <LoopForever+0xe>)
	adds	r2, r0, r1
 80013ee:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80013f0:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80013f2:	f4ff aff6 	bcc.w	80013e2 <CopyDataInit>
	ldr	r2, =_sbss
 80013f6:	4a0c      	ldr	r2, [pc, #48]	; (8001428 <LoopForever+0x12>)
	b	LoopFillZerobss
 80013f8:	f000 b803 	b.w	8001402 <LoopFillZerobss>

080013fc <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80013fc:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80013fe:	f842 3b04 	str.w	r3, [r2], #4

08001402 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001402:	4b0a      	ldr	r3, [pc, #40]	; (800142c <LoopForever+0x16>)
	cmp	r2, r3
 8001404:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001406:	f4ff aff9 	bcc.w	80013fc <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800140a:	f7ff ff2f 	bl	800126c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800140e:	f000 f811 	bl	8001434 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001412:	f7ff ff0d 	bl	8001230 <main>

08001416 <LoopForever>:

LoopForever:
    b LoopForever
 8001416:	f7ff bffe 	b.w	8001416 <LoopForever>
 800141a:	0000      	.short	0x0000
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 800141c:	080014a4 	.word	0x080014a4
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001420:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001424:	20000030 	.word	0x20000030
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 8001428:	20000030 	.word	0x20000030
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 800142c:	20000030 	.word	0x20000030

08001430 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001430:	f7ff bffe 	b.w	8001430 <ADC1_2_IRQHandler>

08001434 <__libc_init_array>:
 8001434:	b570      	push	{r4, r5, r6, lr}
 8001436:	4e0f      	ldr	r6, [pc, #60]	; (8001474 <__libc_init_array+0x40>)
 8001438:	4d0f      	ldr	r5, [pc, #60]	; (8001478 <__libc_init_array+0x44>)
 800143a:	1b76      	subs	r6, r6, r5
 800143c:	10b6      	asrs	r6, r6, #2
 800143e:	d007      	beq.n	8001450 <__libc_init_array+0x1c>
 8001440:	3d04      	subs	r5, #4
 8001442:	2400      	movs	r4, #0
 8001444:	3401      	adds	r4, #1
 8001446:	f855 3f04 	ldr.w	r3, [r5, #4]!
 800144a:	4798      	blx	r3
 800144c:	42a6      	cmp	r6, r4
 800144e:	d1f9      	bne.n	8001444 <__libc_init_array+0x10>
 8001450:	4e0a      	ldr	r6, [pc, #40]	; (800147c <__libc_init_array+0x48>)
 8001452:	4d0b      	ldr	r5, [pc, #44]	; (8001480 <__libc_init_array+0x4c>)
 8001454:	1b76      	subs	r6, r6, r5
 8001456:	f000 f819 	bl	800148c <_init>
 800145a:	10b6      	asrs	r6, r6, #2
 800145c:	d008      	beq.n	8001470 <__libc_init_array+0x3c>
 800145e:	3d04      	subs	r5, #4
 8001460:	2400      	movs	r4, #0
 8001462:	3401      	adds	r4, #1
 8001464:	f855 3f04 	ldr.w	r3, [r5, #4]!
 8001468:	4798      	blx	r3
 800146a:	42a6      	cmp	r6, r4
 800146c:	d1f9      	bne.n	8001462 <__libc_init_array+0x2e>
 800146e:	bd70      	pop	{r4, r5, r6, pc}
 8001470:	bd70      	pop	{r4, r5, r6, pc}
 8001472:	bf00      	nop
	...
 8001484:	454c4c49 	.word	0x454c4c49
 8001488:	004c4147 	.word	0x004c4147

0800148c <_init>:
 800148c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800148e:	bf00      	nop
 8001490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001492:	bc08      	pop	{r3}
 8001494:	469e      	mov	lr, r3
 8001496:	4770      	bx	lr

08001498 <_fini>:
 8001498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800149a:	bf00      	nop
 800149c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800149e:	bc08      	pop	{r3}
 80014a0:	469e      	mov	lr, r3
 80014a2:	4770      	bx	lr
